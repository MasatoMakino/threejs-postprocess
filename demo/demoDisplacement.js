(()=>{"use strict";var __webpack_modules__={673:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module/* Scene */.xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      id: "webgl-canvas",\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      canvas: document.getElementById(option.id),\n      antialias: option.antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(30);\n    scene.add(axesHelper);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(899);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/RenderPass.js\nvar RenderPass = __webpack_require__(42);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/EffectComposer.js + 1 modules\nvar EffectComposer = __webpack_require__(438);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessEffectComposer.js\n\n/**\n * レンダリングの前後に任意の処理を実行する機能を追加したEffectComposer.\n */\nclass PostProcessEffectComposer extends EffectComposer/* EffectComposer */.xC {\n  constructor() {\n    super(...arguments);\n    this.enabled = true;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessRenderer.js\n\n\n\n\n/**\n * 複数のエフェクトコンポーザーと、WebGLRendererを管理し、\n * 連続してポストエフェクト処理を行うためのクラス。\n */\nclass PostProcessRenderer {\n  constructor(scene, camera, renderer) {\n    this._composers = [];\n    this.render = arg => {\n      let delta;\n      if (arg instanceof esm/* RAFTickerEvent */.NH) {\n        delta = arg.delta;\n      } else {\n        delta = arg;\n      }\n      this._composers.forEach(composer => {\n        if (!composer.enabled) return;\n        if (composer.onBeforeRender) composer.onBeforeRender(delta);\n        composer.render(delta);\n        if (composer.onAfterRender) composer.onAfterRender(delta);\n      });\n    };\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n  }\n  get composers() {\n    return this._composers;\n  }\n  /**\n   * シェーダーパスを挟んだEffectComposerを生成、登録する。\n   * @param passes\n   * @param renderPass\n   */\n  addComposer(passes, renderPass) {\n    const composer = PostProcessRenderer.getComposer(passes, this.renderer, {\n      scene: this.scene,\n      camera: this.camera,\n      renderPass: renderPass\n    });\n    this._composers.push(composer);\n    return composer;\n  }\n  /**\n   * コンポーザーを生成する。\n   * @param passes\n   * @param renderer\n   * @param renderPassOption\n   */\n  static getComposer(passes, renderer, renderPassOption) {\n    RenderPassOption.init(renderPassOption);\n    const composer = new PostProcessEffectComposer(renderer);\n    composer.addPass(renderPassOption.renderPass);\n    passes.forEach(p => {\n      composer.addPass(p);\n    });\n    return composer;\n  }\n  /**\n   * ウィンドウリサイズ時の処理\n   * @param w\n   * @param h\n   */\n  setSize(w, h) {\n    this.camera.aspect = w / h;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(w, h);\n    this._composers.forEach(composer => {\n      composer.setSize(w, h);\n    });\n  }\n  /**\n   * WebGLRendererのレンダリングサイズを取得する。\n   */\n  getSize() {\n    return this.renderer.getSize(new three_module/* Vector2 */.FM8());\n  }\n}\n/**\n * getComposer関数で利用するRenderPass初期化オプション\n *\n * sceneとcameraのセット、もしくはrenderPassインスタンスを代入する必要がある。\n * sceneとcameraのセットの場合 : RenderPassインスタンスを生成する。\n * renderPassインスタンスの場合 : そのままrenderPassインスタンスを利用する。\n */\nclass RenderPassOption {\n  static init(option) {\n    if (option.renderPass == null) {\n      option.renderPass = new RenderPass/* RenderPass */.C(option.scene, option.camera);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessShader.js\n/**\n * EffectComposer用のShaderオブジェクトに必要な要素を定義したクラス。\n * このクラスのインスタンスをShaderPassに渡すことで、任意のシェーダーエフェクトコンポーザーになる。\n */\nclass PostProcessShader_PostProcessShader {\n  constructor() {\n    //language=GLSL\n    this.vertexShader = `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  `;\n    this.initUniform();\n  }\n  initUniform() {\n    this.uniforms = {\n      tDiffuse: {\n        value: null\n      }\n    };\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\nvar ShaderPass = __webpack_require__(571);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessShaderPass.js\n\nclass PostProcessShaderPass_PostProcessShaderPass extends ShaderPass/* ShaderPass */.T {\n  get tDiffuse() {\n    return this.uniforms.tDiffuse.value;\n  }\n  set tDiffuse(value) {\n    this.uniforms.tDiffuse.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/postprocess/index.js\n\n\n\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShader.js\n\n\n\nclass PeripheralLightShader_PeripheralLightShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 5.0\n      },\n      radiusInner: {\n        value: 0.75\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      },\n      color: {\n        value: new Color(0, 0, 0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShaderPass.js\n\n\n/**\n * 周辺光量の減光を表現するフィルタ。\n */\nclass PeripheralLightShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  constructor() {\n    super(new PeripheralLightShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/index.js\n\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShader.js\n\n\n\nclass ChromaticAberrationShader_ChromaticAberrationShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 1.0\n      },\n      radiusInner: {\n        value: 0.25\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShaderPass.js\n\n\nclass ChromaticAberrationShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  constructor() {\n    super(new ChromaticAberrationShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/index.js\n\n;// CONCATENATED MODULE: ./esm/mix/MixShader.js\n\n\n\nclass MixShader_MixShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      mixTexture: {\n        value: null\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/MixShaderPass.js\n\n\n/**\n * 他のエフェクトコンポーザーの描画結果を受け取り、自身のレンダリング結果に乗算するShaderPass\n */\nclass MixShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get mixTexture() {\n    return this.uniforms.mixTexture.value;\n  }\n  set mixTexture(value) {\n    this.uniforms.mixTexture.value = value;\n  }\n  constructor(mixTexture) {\n    super(new MixShader());\n    this.mixTexture = mixTexture;\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/index.js\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js + 1 modules\nvar UnrealBloomPass = __webpack_require__(275);\n;// CONCATENATED MODULE: ./esm/bloom/MaterialStorage.js\n/**\n * Bloom設定に応じて、オリジナルのマテリアルを格納するためのオブジェクト。\n * Object3D.userData.materialStorageに格納される。\n */\nclass MaterialStorage {\n  updateMaterial(original) {\n    this.original = original;\n    this.copyMaterialArray();\n    this.darkenMaterialArray(this.dark);\n  }\n  copyMaterialArray() {\n    if (this.isClone()) {\n      this.cloneToDark();\n    } else {\n      this.copyToDark();\n    }\n  }\n  /**\n   * darkenマテリアルのコピーに、クローンを使用するかcopyを使用するかを判定する。\n   */\n  isClone() {\n    const darkenHead = this.getHeadMaterial(this.dark);\n    const originalHead = this.getHeadMaterial(this.original);\n    if (darkenHead == null || darkenHead.type !== originalHead.type) {\n      return true;\n    }\n    return false;\n  }\n  getHeadMaterial(mat) {\n    const isArray = Array.isArray(mat);\n    if (isArray) return mat[0];\n    return mat;\n  }\n  copyToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark.forEach((drk, index) => {\n        drk.copy(this.original[index]);\n      });\n    } else {\n      this.dark.copy(this.original);\n    }\n  }\n  cloneToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark = this.original.map(val => {\n        return val.clone();\n      });\n    } else {\n      this.dark = this.original.clone();\n    }\n  }\n  darkenMaterialArray(material) {\n    if (!Array.isArray(material)) {\n      MaterialStorage.darkenMaterial(material);\n      return;\n    }\n    material.forEach(mat => {\n      MaterialStorage.darkenMaterial(mat);\n    });\n  }\n  /**\n   * マテリアルを反射光のない黒に書き換える。\n   * @param material\n   */\n  static darkenMaterial(material) {\n    if (material["color"] != null) {\n      material["color"].setHex(0);\n    }\n    if (material["shininess"] != null) {\n      material["shininess"] = 0;\n    }\n    if (material["specular"] != null) {\n      material["specular"].setHex(0);\n    }\n    if (material["emissive"] != null) {\n      material["emissive"].setHex(0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/MaterialSwitcher.js\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassにおいて、マテリアルの切り替え処理を担当するクラス。\n */\nclass MaterialSwitcher {\n  constructor(scene) {\n    this.darkenNonBloomed = () => {\n      this.scene.traverseVisible(this.switchToDarken);\n    };\n    this.restoreMaterial = () => {\n      this.scene.traverseVisible(this.switchToOriginalMaterial);\n    };\n    /**\n     * scene上の各オブジェクトに対して、マテリアルの切り替えを行う。\n     * bloom対象外であれば#000のマテリアルに。\n     *\n     * @param obj sceneをtraverseして取得したオブジェクト。\n     */\n    this.switchToDarken = obj => {\n      if (!this.isDarken(obj)) return;\n      if (obj.userData.materialStorage == null) {\n        obj.userData.materialStorage = new MaterialStorage();\n      }\n      const storage = obj.userData.materialStorage;\n      const mesh = obj;\n      storage.updateMaterial(mesh.material);\n      mesh.material = storage.dark;\n    };\n    /**\n     * マテリアルストレージに格納されたオリジナルのマテリアル設定に復帰する。\n     * @param obj\n     */\n    this.switchToOriginalMaterial = obj => {\n      if (!this.isDarken(obj)) return;\n      const mesh = obj;\n      mesh.material = obj.userData.materialStorage.original;\n    };\n    this.scene = scene;\n    this.layers = new three_module/* Layers */.S9g();\n    this.layers.set(BloomEffectComposer.BLOOM);\n  }\n  /**\n   * そのオブジェクトがbloomマスクの対象か否かを判定する。\n   * @param obj\n   */\n  isDarken(obj) {\n    if (obj.isMesh == null && obj.isLine == null) return false;\n    return !this.layers.test(obj.layers);\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/BloomEffectComposer.js\n\n\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassを内包したEffectComposer.\n * BloomEffectComposer.BLOOMレイヤーに含まれるオブジェクトのみをBloomさせる.\n */\nclass BloomEffectComposer extends PostProcessEffectComposer {\n  constructor(scene, renderer, renderPassOption) {\n    super(renderer);\n    this.switcher = new MaterialSwitcher(scene);\n    const size = renderer.getSize(new three_module/* Vector2 */.FM8());\n    this.bloomPass = new UnrealBloomPass/* UnrealBloomPass */.m(size, 1.5, 0.4, 0.4);\n    // TODO : PR d.ts\n    // @ts-ignore\n    this.renderToScreen = false;\n    RenderPassOption.init(renderPassOption);\n    this.addPass(renderPassOption.renderPass);\n    this.addPass(this.bloomPass);\n    this.onBeforeRender = this.switcher.darkenNonBloomed;\n    this.onAfterRender = this.switcher.restoreMaterial;\n  }\n  /**\n   * 描画結果を反映したテクスチャを取得する。\n   */\n  get result() {\n    return this.renderTarget2.texture;\n  }\n}\nBloomEffectComposer.ENTIRE = 0;\nBloomEffectComposer.BLOOM = 30;\n;// CONCATENATED MODULE: ./esm/bloom/index.js\n\n;// CONCATENATED MODULE: ./esm/fxaa/FXAAShaderPass.js\n\n\n/**\n * FXAAShaderを組み込み済みのShaderPass\n */\nclass FXAAShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super(FXAAShaderModule["FXAAShader"]);\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    const uniforms = this.material.uniforms;\n    uniforms.resolution.value.x = 1 / width;\n    uniforms.resolution.value.y = 1 / height;\n  }\n}\n;// CONCATENATED MODULE: ./esm/fxaa/index.js\n\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMap.frag.glsl.js\n/* harmony default export */ const DisplacementMap_frag_glsl = (() => {\n  //language=GLSL\n  return `\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\n\nuniform float strengthX;\nuniform float strengthY;\nuniform bool hasMap;\nuniform sampler2D map;\nuniform vec2 aspect;\n\nvoid main() {\n  vec2 uv = vUv;\n  if( hasMap ){\n    vec2 fixedUV = vUv - 0.5;\n    fixedUV *= aspect;\n    fixedUV += 0.5;\n    \n    vec4 displacement = texture2D( map, fixedUV );\n    uv +=  displacement.rg * vec2 (strengthX, strengthY);\n }\n\n  vec4 color = texture2D( tDiffuse, uv );\n  gl_FragColor = color;\n}\n  `;\n});\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShader.js\n\n\n\n\nclass DisplacementMapShader extends PostProcessShader_PostProcessShader {\n  constructor() {\n    super();\n    this.fragmentShader = DisplacementMap_frag_glsl();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = three_module/* UniformsUtils.merge */.rDY.merge([this.uniforms, {\n      strengthX: {\n        value: 0.0\n      },\n      strengthY: {\n        value: 0.0\n      },\n      map: {\n        value: null\n      },\n      hasMap: {\n        value: false\n      },\n      aspect: {\n        value: new three_module/* Vector2 */.FM8(1.0, 1.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShaderPass.js\n\n\n\n\n/**\n * DisplacementMapによって画面を歪ませるShaderPass\n */\nclass DisplacementMapShaderPass extends PostProcessShaderPass_PostProcessShaderPass {\n  constructor() {\n    super(new DisplacementMapShader());\n  }\n  get map() {\n    return this.uniforms.map.value;\n  }\n  /**\n   * DisplacementMapを読み込む。\n   * 読み込み後にアスペクト比の補正を行う。\n   *\n   * @param url\n   */\n  loadMap(url) {\n    const texture = new three_module/* TextureLoader */.dpR().load(url, texture => {\n      this.mapSizeW = texture.image.width;\n      this.mapSizeH = texture.image.height;\n      this.updateAspect();\n    });\n    this.uniforms.map.value = texture;\n    this.uniforms.hasMap.value = texture != null;\n  }\n  get strengthX() {\n    return this.uniforms.strengthX.value;\n  }\n  set strengthX(value) {\n    this.uniforms.strengthX.value = value;\n  }\n  get strengthY() {\n    return this.uniforms.strengthY.value;\n  }\n  set strengthY(value) {\n    this.uniforms.strengthY.value = value;\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    this.rendererSizeW = width;\n    this.rendererSizeH = height;\n    this.updateAspect();\n  }\n  updateAspect() {\n    if (this.mapSizeW == null || this.rendererSizeW == null) {\n      return;\n    }\n    const rendererAspect = this.rendererSizeW / this.rendererSizeH;\n    const mapAspect = this.mapSizeW / this.mapSizeH;\n    if (rendererAspect > mapAspect) {\n      this.uniforms.aspect.value = new three_module/* Vector2 */.FM8(1.0, mapAspect / rendererAspect);\n    } else {\n      this.uniforms.aspect.value = new three_module/* Vector2 */.FM8(rendererAspect / mapAspect, 1.0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/index.js\n\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShader.js\n\n\n\nclass ColorFilterShader_ColorFilterShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      h: {\n        value: 0.0\n      },\n      multiS: {\n        value: 1.0\n      },\n      multiB: {\n        value: 1.0\n      },\n      addS: {\n        value: 0.0\n      },\n      addB: {\n        value: 0.0\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShaderPass.js\n\n\n/**\n * hsb値をオフセットして、色を変化させるシェーダーパス\n *\n * 例 )\n * multiS = 0.0, addB = 1.0にすると白に飽和する。\n * multiB = 0.0, もしくはaddB = -1.0 でブラックアウト。\n */\nclass ColorFilterShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get h() {\n    return this.uniforms.h.value;\n  }\n  set h(value) {\n    this.uniforms.h.value = value;\n  }\n  get multiS() {\n    return this.uniforms.multiS.value;\n  }\n  set multiS(value) {\n    this.uniforms.multiS.value = value;\n  }\n  get multiB() {\n    return this.uniforms.multiB.value;\n  }\n  set multiB(value) {\n    this.uniforms.multiB.value = value;\n  }\n  get addS() {\n    return this.uniforms.addS.value;\n  }\n  set addS(value) {\n    this.uniforms.addS.value = value;\n  }\n  get addB() {\n    return this.uniforms.addB.value;\n  }\n  set addB(value) {\n    this.uniforms.addB.value = value;\n  }\n  constructor() {\n    super(new ColorFilterShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/index.js\n\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShader.js\n\n\n\nclass MonotoneShader_MonotoneShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      strength: {\n        value: 1.0\n      },\n      color: {\n        value: new Color(0xffffff)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShaderPass.js\n\n\n/**\n *\n */\nclass MonotoneShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  constructor() {\n    super(new MonotoneShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/index.js\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/CommonGUI.js\nclass CommonGUI {\n  static initGUIResolution(gui, postRenderer) {\n    const size = postRenderer.getSize();\n    const prop = {\n      width: size.width,\n      height: size.height\n    };\n    const onChange = () => {\n      postRenderer.setSize(prop.width, prop.height);\n    };\n    const folder = gui.addFolder("Resolution");\n    folder.add(prop, "width", 2, 1920).step(1).onChange(onChange);\n    folder.add(prop, "height", 2, 1080).step(1).onChange(onChange);\n    folder.open();\n  }\n  static initColorGUI(folder, target, propName = "color") {\n    const prop = {};\n    const targetColor = target[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/SMAAPass.js\nvar SMAAPass = __webpack_require__(998);\n;// CONCATENATED MODULE: ./demoSrc/demoDisplacement.js\n\n\n\n\n\n\n\nclass Study {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0xffffff, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H);\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    this.initObject(scene);\n    this.postRenderer = new PostProcessRenderer(scene, camera, renderer);\n    const pass = new DisplacementMapShaderPass();\n    pass.loadMap("./texture/caust_001.png");\n    // pass.loadMap("./texture/uv_grid_h.jpg");\n    // pass.loadMap("./texture/uv_grid_w.jpg");\n\n    const aa = new SMAAPass/* SMAAPass */.d();\n    this.postRenderer.addComposer([pass, aa]);\n    esm/* RAFTicker.on */.Fz.on(esm/* RAFTickerEventType.tick */.M9.tick, this.postRenderer.render);\n    this.initGUI(pass);\n  }\n  initObject(scene) {\n    const geo = new three_module/* SphereGeometry */.xo$(10, 16, 16);\n    const mat = new three_module/* MeshLambertMaterial */.YBo({\n      fog: scene.fog !== undefined\n    });\n    mat.color = new three_module/* Color */.Ilk(0xff6666);\n    // mat.wireframe = true;\n    const center = new three_module/* Mesh */.Kj0(geo, mat);\n    scene.add(center);\n    const satellite = new three_module/* Mesh */.Kj0(geo, mat.clone());\n    satellite.position.set(30, 0, 0);\n    scene.add(satellite);\n    const satellite02 = new three_module/* Mesh */.Kj0(geo, mat);\n    satellite02.position.set(-30, 0, 0);\n    scene.add(satellite02);\n  }\n  initGUI(pass) {\n    const gui = new lil_gui_esm/* default */.ZP();\n    this.initGUIEffect(gui, pass);\n    CommonGUI.initGUIResolution(gui, this.postRenderer);\n  }\n  initGUIEffect(gui, pass) {\n    const prop = {\n      // color: pass.color.getHex()\n    };\n    const folder = gui.addFolder("Displacement map");\n    folder.add(pass, "strengthX", -1.0, 1.0).step(0.01);\n    folder.add(pass, "strengthY", -1.0, 1.0).step(0.01);\n    // folder.add(pass, "radiusInner", 0.0, 3.0);\n    // folder.add(pass, "radiusOuter", 0.0, 3.0);\n    // folder.addColor(prop, "color").onChange(val => {\n    //   pass.color.setHex(val);\n    // });\n    folder.open();\n  }\n}\nwindow.onload = () => {\n  const study = new Study();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjczLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQU9lO0FBQzJEO0FBRW5FLE1BQU1PLE1BQU0sQ0FBQztFQUNsQixPQUFPQyxTQUFTQSxDQUFBLEVBQUc7SUFDakIsTUFBTUMsS0FBSyxHQUFHLElBQUlMLDJCQUFLLEVBQUU7SUFDekIsT0FBT0ssS0FBSztFQUNkO0VBRUEsT0FBT0MsU0FBU0EsQ0FBQ0QsS0FBSyxFQUFFO0lBQ3RCLE1BQU1FLFlBQVksR0FBRyxJQUFJWCxrQ0FBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7SUFDcERTLEtBQUssQ0FBQ0csR0FBRyxDQUFDRCxZQUFZLENBQUM7SUFDdkIsT0FBT0EsWUFBWTtFQUNyQjtFQUVBLE9BQU9FLFVBQVVBLENBQUNKLEtBQUssRUFBRUssQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLElBQUksR0FBRyxDQUFDLEVBQUVDLEdBQUcsR0FBRyxHQUFHLEVBQUU7SUFDbEQsTUFBTUMsTUFBTSxHQUFHLElBQUlmLHVDQUFpQixDQUFDLEVBQUUsRUFBRVcsQ0FBQyxHQUFHQyxDQUFDLEVBQUVDLElBQUksRUFBRUMsR0FBRyxDQUFDO0lBQzFEQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQzlCRixNQUFNLENBQUNHLGlCQUFpQixDQUFDLEtBQUssQ0FBQztJQUMvQlosS0FBSyxDQUFDRyxHQUFHLENBQUNNLE1BQU0sQ0FBQztJQUNqQixPQUFPQSxNQUFNO0VBQ2Y7RUFFQSxPQUFPSSxXQUFXQSxDQUFDSixNQUFNLEVBQUVLLE1BQU0sRUFBRTtJQUNqQyxJQUFJQyxVQUFVO0lBQ2QsSUFBSUQsTUFBTSxFQUFFO01BQ1ZDLFVBQVUsR0FBR0QsTUFBTSxDQUFDQyxVQUFVO0lBQ2hDO0lBQ0EsTUFBTUMsT0FBTyxHQUFHLElBQUluQixrQ0FBYSxDQUFDWSxNQUFNLEVBQUVNLFVBQVUsQ0FBQztJQUNyREMsT0FBTyxDQUFDQyxNQUFNLEVBQUU7SUFDaEIsT0FBT0QsT0FBTztFQUNoQjtFQUVBLE9BQU9FLFlBQVlBLENBQUNiLENBQUMsRUFBRUMsQ0FBQyxFQUFFYSxNQUFNLEVBQUU7SUFDaENBLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQ3BCO01BQ0VDLEtBQUssRUFBRSxRQUFRO01BQ2ZDLEVBQUUsRUFBRSxjQUFjO01BQ2xCQyxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQ0RMLE1BQU0sQ0FDUDtJQUNELE1BQU1NLFFBQVEsR0FBRyxJQUFJN0IsbUNBQWEsQ0FBQztNQUNqQzhCLE1BQU0sRUFBRUMsUUFBUSxDQUFDQyxjQUFjLENBQUNULE1BQU0sQ0FBQ0ksRUFBRSxDQUFDO01BQzFDQyxTQUFTLEVBQUVMLE1BQU0sQ0FBQ0s7SUFDcEIsQ0FBQyxDQUFDO0lBQ0ZDLFFBQVEsQ0FBQ0ksYUFBYSxDQUFDLElBQUlwQywyQkFBSyxDQUFDMEIsTUFBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUMvQ0csUUFBUSxDQUFDSyxPQUFPLENBQUN6QixDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUN0Qm1CLFFBQVEsQ0FBQ00sYUFBYSxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQixDQUFDO0lBQy9DLE9BQU9SLFFBQVE7RUFDakI7RUFFQSxPQUFPUyxVQUFVQSxDQUFDbEMsS0FBSyxFQUFFO0lBQ3ZCLE1BQU1tQyxVQUFVLEdBQUcsSUFBSTNDLGdDQUFVLENBQUMsRUFBRSxDQUFDO0lBQ3JDUSxLQUFLLENBQUNHLEdBQUcsQ0FBQ2dDLFVBQVUsQ0FBQztFQUN2QjtBQUNGLEM7Ozs7Ozs7O0FDL0RrRjtBQUNsRjtBQUNBO0FBQ0E7QUFDTyxNQUFNRSx5QkFBeUIsU0FBU0QscUNBQWMsQ0FBQztFQUMxREUsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLEdBQUdDLFNBQVMsQ0FBQztJQUNuQixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJO0VBQ3ZCO0FBQ0osQzs7OztBQ1RpQztBQUN5QztBQUNGO0FBQ2Q7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNSSxtQkFBbUIsQ0FBQztFQUM3Qk4sV0FBV0EsQ0FBQ3RDLEtBQUssRUFBRVMsTUFBTSxFQUFFZ0IsUUFBUSxFQUFFO0lBQ2pDLElBQUksQ0FBQ29CLFVBQVUsR0FBRyxFQUFFO0lBQ3BCLElBQUksQ0FBQy9CLE1BQU0sR0FBSWdDLEdBQUcsSUFBSztNQUNuQixJQUFJQyxLQUFLO01BQ1QsSUFBSUQsR0FBRyxZQUFZSCwwQkFBYyxFQUFFO1FBQy9CSSxLQUFLLEdBQUdELEdBQUcsQ0FBQ0MsS0FBSztNQUNyQixDQUFDLE1BQ0k7UUFDREEsS0FBSyxHQUFHRCxHQUFHO01BQ2Y7TUFDQSxJQUFJLENBQUNELFVBQVUsQ0FBQ0csT0FBTyxDQUFFQyxRQUFRLElBQUs7UUFDbEMsSUFBSSxDQUFDQSxRQUFRLENBQUNULE9BQU8sRUFDakI7UUFDSixJQUFJUyxRQUFRLENBQUNDLGNBQWMsRUFDdkJELFFBQVEsQ0FBQ0MsY0FBYyxDQUFDSCxLQUFLLENBQUM7UUFDbENFLFFBQVEsQ0FBQ25DLE1BQU0sQ0FBQ2lDLEtBQUssQ0FBQztRQUN0QixJQUFJRSxRQUFRLENBQUNFLGFBQWEsRUFDdEJGLFFBQVEsQ0FBQ0UsYUFBYSxDQUFDSixLQUFLLENBQUM7TUFDckMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUNELElBQUksQ0FBQ3RCLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUN6QixLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDUyxNQUFNLEdBQUdBLE1BQU07RUFDeEI7RUFDQSxJQUFJMkMsU0FBU0EsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNQLFVBQVU7RUFDMUI7RUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0lRLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0lBQzVCLE1BQU1OLFFBQVEsR0FBR0wsbUJBQW1CLENBQUNZLFdBQVcsQ0FBQ0YsTUFBTSxFQUFFLElBQUksQ0FBQzdCLFFBQVEsRUFBRTtNQUNwRXpCLEtBQUssRUFBRSxJQUFJLENBQUNBLEtBQUs7TUFDakJTLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07TUFDbkI4QyxVQUFVLEVBQUVBO0lBQ2hCLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQ1YsVUFBVSxDQUFDWSxJQUFJLENBQUNSLFFBQVEsQ0FBQztJQUM5QixPQUFPQSxRQUFRO0VBQ25CO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0ksT0FBT08sV0FBV0EsQ0FBQ0YsTUFBTSxFQUFFN0IsUUFBUSxFQUFFaUMsZ0JBQWdCLEVBQUU7SUFDbkRDLGdCQUFnQixDQUFDQyxJQUFJLENBQUNGLGdCQUFnQixDQUFDO0lBQ3ZDLE1BQU1ULFFBQVEsR0FBRyxJQUFJWix5QkFBeUIsQ0FBQ1osUUFBUSxDQUFDO0lBQ3hEd0IsUUFBUSxDQUFDWSxPQUFPLENBQUNILGdCQUFnQixDQUFDSCxVQUFVLENBQUM7SUFDN0NELE1BQU0sQ0FBQ04sT0FBTyxDQUFFYyxDQUFDLElBQUs7TUFDbEJiLFFBQVEsQ0FBQ1ksT0FBTyxDQUFDQyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBQ0YsT0FBT2IsUUFBUTtFQUNuQjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSW5CLE9BQU9BLENBQUNpQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUNWLElBQUksQ0FBQ3ZELE1BQU0sQ0FBQ3dELE1BQU0sR0FBR0YsQ0FBQyxHQUFHQyxDQUFDO0lBQzFCLElBQUksQ0FBQ3ZELE1BQU0sQ0FBQ3lELHNCQUFzQixFQUFFO0lBQ3BDLElBQUksQ0FBQ3pDLFFBQVEsQ0FBQ00sYUFBYSxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQixDQUFDO0lBQ3BELElBQUksQ0FBQ1IsUUFBUSxDQUFDSyxPQUFPLENBQUNpQyxDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUNuQixVQUFVLENBQUNHLE9BQU8sQ0FBRUMsUUFBUSxJQUFLO01BQ2xDQSxRQUFRLENBQUNuQixPQUFPLENBQUNpQyxDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUM7RUFDTjtFQUNBO0FBQ0o7QUFDQTtFQUNJRyxPQUFPQSxDQUFBLEVBQUc7SUFDTixPQUFPLElBQUksQ0FBQzFDLFFBQVEsQ0FBQzBDLE9BQU8sQ0FBQyxJQUFJMUIsNkJBQU8sRUFBRSxDQUFDO0VBQy9DO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1rQixnQkFBZ0IsQ0FBQztFQUMxQixPQUFPQyxJQUFJQSxDQUFDekMsTUFBTSxFQUFFO0lBQ2hCLElBQUlBLE1BQU0sQ0FBQ29DLFVBQVUsSUFBSSxJQUFJLEVBQUU7TUFDM0JwQyxNQUFNLENBQUNvQyxVQUFVLEdBQUcsSUFBSWIsNEJBQVUsQ0FBQ3ZCLE1BQU0sQ0FBQ25CLEtBQUssRUFBRW1CLE1BQU0sQ0FBQ1YsTUFBTSxDQUFDO0lBQ25FO0VBQ0o7QUFDSixDOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU0yRCxtQ0FBaUIsQ0FBQztFQUMzQjlCLFdBQVdBLENBQUEsRUFBRztJQUNWO0lBQ0EsSUFBSSxDQUFDK0IsWUFBWSxHQUFJO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0lBQ0ssSUFBSSxDQUFDQyxXQUFXLEVBQUU7RUFDdEI7RUFDQUEsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSSxDQUFDQyxRQUFRLEdBQUc7TUFDWkMsUUFBUSxFQUFFO1FBQUVDLEtBQUssRUFBRTtNQUFLO0lBQzVCLENBQUM7RUFDTDtBQUNKLEM7Ozs7QUNyQjBFO0FBQ25FLE1BQU1FLDJDQUFxQixTQUFTRCw0QkFBVSxDQUFDO0VBQ2xELElBQUlGLFFBQVFBLENBQUEsRUFBRztJQUNYLE9BQU8sSUFBSSxDQUFDRCxRQUFRLENBQUNDLFFBQVEsQ0FBQ0MsS0FBSztFQUN2QztFQUNBLElBQUlELFFBQVFBLENBQUNDLEtBQUssRUFBRTtJQUNoQixJQUFJLENBQUNGLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7RUFDeEM7QUFDSixDOztBQ1JzQztBQUNGOzs7QUNEUztBQUNBO0FBQ1k7QUFDbEQsTUFBTUssMkNBQXFCLFNBQVNWLGdEQUFBQSxpQkFBaUIsR0FBQztFQUN6RDlCLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssRUFBRTtJQUNQLElBQUksQ0FBQ3lDLGNBQWMsR0FBR0YsY0FBYyxFQUFFO0VBQzFDO0VBQ0FQLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQ0EsV0FBVyxFQUFFO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHSyxhQUFhLENBQUNJLEtBQUssQ0FBQyxDQUNoQyxJQUFJLENBQUNULFFBQVEsRUFDYjtNQUNJVSxJQUFJLEVBQUU7UUFBRVIsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNwQlMsV0FBVyxFQUFFO1FBQUVULEtBQUssRUFBRTtNQUFLLENBQUM7TUFDNUJVLFdBQVcsRUFBRTtRQUFFVixLQUFLLEVBQUVXLElBQUksQ0FBQ0MsSUFBSSxDQUFDLEdBQUc7TUFBRSxDQUFDO01BQ3RDL0QsS0FBSyxFQUFFO1FBQUVtRCxLQUFLLEVBQUUsSUFBSWhGLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7TUFBRTtJQUN2QyxDQUFDLENBQ0osQ0FBQztFQUNOO0FBQ0osQzs7QUNwQmdFO0FBQ2Y7QUFDakQ7QUFDQTtBQUNBO0FBQ08sTUFBTTZGLHlCQUF5QixTQUFTWCxnREFBQUEscUJBQXFCLEdBQUM7RUFDakUsSUFBSU0sSUFBSUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUNWLFFBQVEsQ0FBQ1UsSUFBSSxDQUFDUixLQUFLO0VBQ25DO0VBQ0EsSUFBSVEsSUFBSUEsQ0FBQ1IsS0FBSyxFQUFFO0lBQ1osSUFBSSxDQUFDRixRQUFRLENBQUNVLElBQUksQ0FBQ1IsS0FBSyxHQUFHQSxLQUFLO0VBQ3BDO0VBQ0EsSUFBSVMsV0FBV0EsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxJQUFJLENBQUNYLFFBQVEsQ0FBQ1csV0FBVyxDQUFDVCxLQUFLO0VBQzFDO0VBQ0EsSUFBSVMsV0FBV0EsQ0FBQ1QsS0FBSyxFQUFFO0lBQ25CLElBQUksQ0FBQ0YsUUFBUSxDQUFDVyxXQUFXLENBQUNULEtBQUssR0FBR0EsS0FBSztFQUMzQztFQUNBLElBQUlVLFdBQVdBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDWixRQUFRLENBQUNZLFdBQVcsQ0FBQ1YsS0FBSztFQUMxQztFQUNBLElBQUlVLFdBQVdBLENBQUNWLEtBQUssRUFBRTtJQUNuQixJQUFJLENBQUNGLFFBQVEsQ0FBQ1ksV0FBVyxDQUFDVixLQUFLLEdBQUdBLEtBQUs7RUFDM0M7RUFDQSxJQUFJbkQsS0FBS0EsQ0FBQSxFQUFHO0lBQ1IsT0FBTyxJQUFJLENBQUNpRCxRQUFRLENBQUNqRCxLQUFLLENBQUNtRCxLQUFLO0VBQ3BDO0VBQ0EsSUFBSW5ELEtBQUtBLENBQUNtRCxLQUFLLEVBQUU7SUFDYixJQUFJLENBQUNGLFFBQVEsQ0FBQ2pELEtBQUssQ0FBQ21ELEtBQUssR0FBR0EsS0FBSztFQUNyQztFQUNBbkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLElBQUl3QyxxQkFBcUIsRUFBRSxDQUFDO0VBQ3RDO0FBQ0osQzs7OztBRWpDc0M7QUFDTztBQUNnQjtBQUN0RCxNQUFNUyxtREFBeUIsU0FBU25CLGdEQUFBQSxpQkFBaUIsR0FBQztFQUM3RDlCLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssRUFBRTtJQUNQLElBQUksQ0FBQ3lDLGNBQWMsR0FBR0YsY0FBYyxFQUFFO0VBQzFDO0VBQ0FQLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQ0EsV0FBVyxFQUFFO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHSyxhQUFhLENBQUNJLEtBQUssQ0FBQyxDQUNoQyxJQUFJLENBQUNULFFBQVEsRUFDYjtNQUNJVSxJQUFJLEVBQUU7UUFBRVIsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNwQlMsV0FBVyxFQUFFO1FBQUVULEtBQUssRUFBRTtNQUFLLENBQUM7TUFDNUJVLFdBQVcsRUFBRTtRQUFFVixLQUFLLEVBQUVXLElBQUksQ0FBQ0MsSUFBSSxDQUFDLEdBQUc7TUFBRTtJQUN6QyxDQUFDLENBQ0osQ0FBQztFQUNOO0FBQ0osQzs7QUNuQndFO0FBQ3ZCO0FBQzFDLE1BQU1HLDZCQUE2QixTQUFTYixnREFBQUEscUJBQXFCLEdBQUM7RUFDckUsSUFBSU0sSUFBSUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUNWLFFBQVEsQ0FBQ1UsSUFBSSxDQUFDUixLQUFLO0VBQ25DO0VBQ0EsSUFBSVEsSUFBSUEsQ0FBQ1IsS0FBSyxFQUFFO0lBQ1osSUFBSSxDQUFDRixRQUFRLENBQUNVLElBQUksQ0FBQ1IsS0FBSyxHQUFHQSxLQUFLO0VBQ3BDO0VBQ0EsSUFBSVMsV0FBV0EsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxJQUFJLENBQUNYLFFBQVEsQ0FBQ1csV0FBVyxDQUFDVCxLQUFLO0VBQzFDO0VBQ0EsSUFBSVMsV0FBV0EsQ0FBQ1QsS0FBSyxFQUFFO0lBQ25CLElBQUksQ0FBQ0YsUUFBUSxDQUFDVyxXQUFXLENBQUNULEtBQUssR0FBR0EsS0FBSztFQUMzQztFQUNBLElBQUlVLFdBQVdBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDWixRQUFRLENBQUNZLFdBQVcsQ0FBQ1YsS0FBSztFQUMxQztFQUNBLElBQUlVLFdBQVdBLENBQUNWLEtBQUssRUFBRTtJQUNuQixJQUFJLENBQUNGLFFBQVEsQ0FBQ1ksV0FBVyxDQUFDVixLQUFLLEdBQUdBLEtBQUs7RUFDM0M7RUFDQW5DLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxJQUFJaUQseUJBQXlCLEVBQUUsQ0FBQztFQUMxQztBQUNKLEM7Ozs7QUV4QjZDO0FBQ007QUFDYjtBQUMvQixNQUFNRSxtQkFBUyxTQUFTckIsZ0RBQUFBLGlCQUFpQixHQUFDO0VBQzdDOUIsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxFQUFFO0lBQ1AsSUFBSSxDQUFDeUMsY0FBYyxHQUFHRixjQUFjLEVBQUU7RUFDMUM7RUFDQVAsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDQSxXQUFXLEVBQUU7SUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUdLLGFBQWEsQ0FBQ0ksS0FBSyxDQUFDLENBQ2hDLElBQUksQ0FBQ1QsUUFBUSxFQUNiO01BQ0ltQixVQUFVLEVBQUU7UUFBRWpCLEtBQUssRUFBRTtNQUFLO0lBQzlCLENBQUMsQ0FDSixDQUFDO0VBQ047QUFDSixDOztBQ2pCaUQ7QUFDVDtBQUN4QztBQUNBO0FBQ0E7QUFDTyxNQUFNa0IsYUFBYSxTQUFTaEIsZ0RBQUFBLHFCQUFxQixHQUFDO0VBQ3JELElBQUllLFVBQVVBLENBQUEsRUFBRztJQUNiLE9BQU8sSUFBSSxDQUFDbkIsUUFBUSxDQUFDbUIsVUFBVSxDQUFDakIsS0FBSztFQUN6QztFQUNBLElBQUlpQixVQUFVQSxDQUFDakIsS0FBSyxFQUFFO0lBQ2xCLElBQUksQ0FBQ0YsUUFBUSxDQUFDbUIsVUFBVSxDQUFDakIsS0FBSyxHQUFHQSxLQUFLO0VBQzFDO0VBQ0FuQyxXQUFXQSxDQUFDb0QsVUFBVSxFQUFFO0lBQ3BCLEtBQUssQ0FBQyxJQUFJRCxTQUFTLEVBQUUsQ0FBQztJQUN0QixJQUFJLENBQUNDLFVBQVUsR0FBR0EsVUFBVTtFQUNoQztBQUNKLEM7Ozs7OztBRWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1FLGVBQWUsQ0FBQztFQUN6QkMsY0FBY0EsQ0FBQ0MsUUFBUSxFQUFFO0lBQ3JCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsaUJBQWlCLEVBQUU7SUFDeEIsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUNDLElBQUksQ0FBQztFQUN2QztFQUNBRixpQkFBaUJBLENBQUEsRUFBRztJQUNoQixJQUFJLElBQUksQ0FBQ0csT0FBTyxFQUFFLEVBQUU7TUFDaEIsSUFBSSxDQUFDQyxXQUFXLEVBQUU7SUFDdEIsQ0FBQyxNQUNJO01BQ0QsSUFBSSxDQUFDQyxVQUFVLEVBQUU7SUFDckI7RUFDSjtFQUNBO0FBQ0o7QUFDQTtFQUNJRixPQUFPQSxDQUFBLEVBQUc7SUFDTixNQUFNRyxVQUFVLEdBQUcsSUFBSSxDQUFDQyxlQUFlLENBQUMsSUFBSSxDQUFDTCxJQUFJLENBQUM7SUFDbEQsTUFBTU0sWUFBWSxHQUFHLElBQUksQ0FBQ0QsZUFBZSxDQUFDLElBQUksQ0FBQ1IsUUFBUSxDQUFDO0lBQ3hELElBQUlPLFVBQVUsSUFBSSxJQUFJLElBQUlBLFVBQVUsQ0FBQ0csSUFBSSxLQUFLRCxZQUFZLENBQUNDLElBQUksRUFBRTtNQUM3RCxPQUFPLElBQUk7SUFDZjtJQUNBLE9BQU8sS0FBSztFQUNoQjtFQUNBRixlQUFlQSxDQUFDRyxHQUFHLEVBQUU7SUFDakIsTUFBTUMsT0FBTyxHQUFHQyxLQUFLLENBQUNELE9BQU8sQ0FBQ0QsR0FBRyxDQUFDO0lBQ2xDLElBQUlDLE9BQU8sRUFDUCxPQUFPRCxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLE9BQU9BLEdBQUc7RUFDZDtFQUNBTCxVQUFVQSxDQUFBLEVBQUc7SUFDVCxNQUFNUSxlQUFlLEdBQUdELEtBQUssQ0FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQ1osUUFBUSxDQUFDO0lBQ3BELElBQUljLGVBQWUsRUFBRTtNQUNqQixJQUFJLENBQUNYLElBQUksQ0FBQ2pELE9BQU8sQ0FBQyxDQUFDNkQsR0FBRyxFQUFFQyxLQUFLLEtBQUs7UUFDOUJELEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQ2pCLFFBQVEsQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDO01BQ2xDLENBQUMsQ0FBQztJQUNOLENBQUMsTUFDSTtNQUNELElBQUksQ0FBQ2IsSUFBSSxDQUFDYyxJQUFJLENBQUMsSUFBSSxDQUFDakIsUUFBUSxDQUFDO0lBQ2pDO0VBQ0o7RUFDQUssV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsTUFBTVMsZUFBZSxHQUFHRCxLQUFLLENBQUNELE9BQU8sQ0FBQyxJQUFJLENBQUNaLFFBQVEsQ0FBQztJQUNwRCxJQUFJYyxlQUFlLEVBQUU7TUFDakIsSUFBSSxDQUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDSCxRQUFRLENBQUNrQixHQUFHLENBQUNDLEdBQUcsSUFBSTtRQUNqQyxPQUFPQSxHQUFHLENBQUNDLEtBQUssRUFBRTtNQUN0QixDQUFDLENBQUM7SUFDTixDQUFDLE1BQ0k7TUFDRCxJQUFJLENBQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDSCxRQUFRLENBQUNvQixLQUFLLEVBQUU7SUFDckM7RUFDSjtFQUNBbEIsbUJBQW1CQSxDQUFDbUIsUUFBUSxFQUFFO0lBQzFCLElBQUksQ0FBQ1IsS0FBSyxDQUFDRCxPQUFPLENBQUNTLFFBQVEsQ0FBQyxFQUFFO01BQzFCdkIsZUFBZSxDQUFDd0IsY0FBYyxDQUFDRCxRQUFRLENBQUM7TUFDeEM7SUFDSjtJQUNBQSxRQUFRLENBQUNuRSxPQUFPLENBQUN5RCxHQUFHLElBQUk7TUFDcEJiLGVBQWUsQ0FBQ3dCLGNBQWMsQ0FBQ1gsR0FBRyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQztFQUNOO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSSxPQUFPVyxjQUFjQSxDQUFDRCxRQUFRLEVBQUU7SUFDNUIsSUFBSUEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRTtNQUMzQkEsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQy9CO0lBQ0EsSUFBSUYsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksRUFBRTtNQUMvQkEsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7SUFDN0I7SUFDQSxJQUFJQSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxFQUFFO01BQzlCQSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUNFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEM7SUFDQSxJQUFJRixRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxFQUFFO01BQzlCQSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUNFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbEM7RUFDSjtBQUNKLEM7O0FDcEYrQjtBQUM2QjtBQUNSO0FBQ3BEO0FBQ0E7QUFDQTtBQUNPLE1BQU1HLGdCQUFnQixDQUFDO0VBQzFCbEYsV0FBV0EsQ0FBQ3RDLEtBQUssRUFBRTtJQUNmLElBQUksQ0FBQ3lILGdCQUFnQixHQUFHLE1BQU07TUFDMUIsSUFBSSxDQUFDekgsS0FBSyxDQUFDMEgsZUFBZSxDQUFDLElBQUksQ0FBQ0MsY0FBYyxDQUFDO0lBQ25ELENBQUM7SUFDRCxJQUFJLENBQUNDLGVBQWUsR0FBRyxNQUFNO01BQ3pCLElBQUksQ0FBQzVILEtBQUssQ0FBQzBILGVBQWUsQ0FBQyxJQUFJLENBQUNHLHdCQUF3QixDQUFDO0lBQzdELENBQUM7SUFDRDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDUSxJQUFJLENBQUNGLGNBQWMsR0FBSUcsR0FBRyxJQUFLO01BQzNCLElBQUksQ0FBQyxJQUFJLENBQUNDLFFBQVEsQ0FBQ0QsR0FBRyxDQUFDLEVBQ25CO01BQ0osSUFBSUEsR0FBRyxDQUFDRSxRQUFRLENBQUNDLGVBQWUsSUFBSSxJQUFJLEVBQUU7UUFDdENILEdBQUcsQ0FBQ0UsUUFBUSxDQUFDQyxlQUFlLEdBQUcsSUFBSXJDLGVBQWUsRUFBRTtNQUN4RDtNQUNBLE1BQU1zQyxPQUFPLEdBQUdKLEdBQUcsQ0FBQ0UsUUFBUSxDQUFDQyxlQUFlO01BQzVDLE1BQU1FLElBQUksR0FBR0wsR0FBRztNQUNoQkksT0FBTyxDQUFDckMsY0FBYyxDQUFDc0MsSUFBSSxDQUFDaEIsUUFBUSxDQUFDO01BQ3JDZ0IsSUFBSSxDQUFDaEIsUUFBUSxHQUFHZSxPQUFPLENBQUNqQyxJQUFJO0lBQ2hDLENBQUM7SUFDRDtBQUNSO0FBQ0E7QUFDQTtJQUNRLElBQUksQ0FBQzRCLHdCQUF3QixHQUFJQyxHQUFHLElBQUs7TUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsUUFBUSxDQUFDRCxHQUFHLENBQUMsRUFDbkI7TUFDSixNQUFNSyxJQUFJLEdBQUdMLEdBQUc7TUFDaEJLLElBQUksQ0FBQ2hCLFFBQVEsR0FBR1csR0FBRyxDQUFDRSxRQUFRLENBQUNDLGVBQWUsQ0FBQ25DLFFBQVE7SUFDekQsQ0FBQztJQUNELElBQUksQ0FBQzlGLEtBQUssR0FBR0EsS0FBSztJQUNsQixJQUFJLENBQUNvSSxNQUFNLEdBQUcsSUFBSWQsNEJBQU0sRUFBRTtJQUMxQixJQUFJLENBQUNjLE1BQU0sQ0FBQ3pILEdBQUcsQ0FBQzRHLHlCQUF5QixDQUFDO0VBQzlDO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSVEsUUFBUUEsQ0FBQ0QsR0FBRyxFQUFFO0lBQ1YsSUFBSUEsR0FBRyxDQUFDUSxNQUFNLElBQUksSUFBSSxJQUFJUixHQUFHLENBQUNTLE1BQU0sSUFBSSxJQUFJLEVBQ3hDLE9BQU8sS0FBSztJQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDSCxNQUFNLENBQUNJLElBQUksQ0FBQ1YsR0FBRyxDQUFDTSxNQUFNLENBQUM7RUFDeEM7QUFDSixDOztBQ3REZ0M7QUFDcUQ7QUFDRDtBQUNsQztBQUNJO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTWIsbUJBQW1CLFNBQVNsRix5QkFBeUIsQ0FBQztFQUMvREMsV0FBV0EsQ0FBQ3RDLEtBQUssRUFBRXlCLFFBQVEsRUFBRWlDLGdCQUFnQixFQUFFO0lBQzNDLEtBQUssQ0FBQ2pDLFFBQVEsQ0FBQztJQUNmLElBQUksQ0FBQ2lILFFBQVEsR0FBRyxJQUFJbEIsZ0JBQWdCLENBQUN4SCxLQUFLLENBQUM7SUFDM0MsTUFBTTJJLElBQUksR0FBR2xILFFBQVEsQ0FBQzBDLE9BQU8sQ0FBQyxJQUFJMUIsNkJBQU8sRUFBRSxDQUFDO0lBQzVDLElBQUksQ0FBQ21HLFNBQVMsR0FBRyxJQUFJSCxzQ0FBZSxDQUFDRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFDekQ7SUFDQTtJQUNBLElBQUksQ0FBQ0UsY0FBYyxHQUFHLEtBQUs7SUFDM0JsRixxQkFBcUIsQ0FBQ0QsZ0JBQWdCLENBQUM7SUFDdkMsSUFBSSxDQUFDRyxPQUFPLENBQUNILGdCQUFnQixDQUFDSCxVQUFVLENBQUM7SUFDekMsSUFBSSxDQUFDTSxPQUFPLENBQUMsSUFBSSxDQUFDK0UsU0FBUyxDQUFDO0lBQzVCLElBQUksQ0FBQzFGLGNBQWMsR0FBRyxJQUFJLENBQUN3RixRQUFRLENBQUNqQixnQkFBZ0I7SUFDcEQsSUFBSSxDQUFDdEUsYUFBYSxHQUFHLElBQUksQ0FBQ3VGLFFBQVEsQ0FBQ2QsZUFBZTtFQUN0RDtFQUNBO0FBQ0o7QUFDQTtFQUNJLElBQUlrQixNQUFNQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxPQUFPO0VBQ3JDO0FBQ0o7QUFDQXpCLG1CQUFtQixDQUFDMEIsTUFBTSxHQUFHLENBQUM7QUFDOUIxQixtQkFBbUIsQ0FBQ2MsS0FBSyxHQUFHLEVBQUUsQzs7OztBRWhDNEM7QUFDbkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ08sTUFBTWMsY0FBYyxTQUFTeEUsZ0RBQUFBLHFCQUFxQixHQUFDO0VBQ3REO0FBQ0o7QUFDQTtFQUNJckMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDNEcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDekM7RUFDQXBILE9BQU9BLENBQUNzSCxLQUFLLEVBQUVDLE1BQU0sRUFBRTtJQUNuQixLQUFLLENBQUN2SCxPQUFPLENBQUNzSCxLQUFLLEVBQUVDLE1BQU0sQ0FBQztJQUM1QixNQUFNOUUsUUFBUSxHQUFHLElBQUksQ0FBQzRDLFFBQVEsQ0FBQzVDLFFBQVE7SUFDdkNBLFFBQVEsQ0FBQytFLFVBQVUsQ0FBQzdFLEtBQUssQ0FBQzhFLENBQUMsR0FBRyxDQUFDLEdBQUdILEtBQUs7SUFDdkM3RSxRQUFRLENBQUMrRSxVQUFVLENBQUM3RSxLQUFLLENBQUMrRSxDQUFDLEdBQUcsQ0FBQyxHQUFHSCxNQUFNO0VBQzVDO0FBQ0osQzs7OztBRWxCQSxnRUFBZSxNQUFNO0VBQ2pCO0VBQ0EsT0FBUTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxFOztBQzNCcUM7QUFDTztBQUNZO0FBQ3pCO0FBQ3pCLE1BQU1JLHFCQUFxQixTQUFTckYsbUNBQWlCLENBQUM7RUFDekQ5QixXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLEVBQUU7SUFDUCxJQUFJLENBQUN5QyxjQUFjLEdBQUdGLHlCQUFjLEVBQUU7RUFDMUM7RUFDQVAsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDQSxXQUFXLEVBQUU7SUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUdLLCtDQUFtQixDQUFDLENBQ2hDLElBQUksQ0FBQ0wsUUFBUSxFQUNiO01BQ0ltRixTQUFTLEVBQUU7UUFBRWpGLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDekJrRixTQUFTLEVBQUU7UUFBRWxGLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDekJ1QyxHQUFHLEVBQUU7UUFBRXZDLEtBQUssRUFBRTtNQUFLLENBQUM7TUFDcEJtRixNQUFNLEVBQUU7UUFBRW5GLEtBQUssRUFBRTtNQUFNLENBQUM7TUFDeEJSLE1BQU0sRUFBRTtRQUFFUSxLQUFLLEVBQUUsSUFBSWhDLDZCQUFPLENBQUMsR0FBRyxFQUFFLEdBQUc7TUFBRTtJQUMzQyxDQUFDLENBQ0osQ0FBQztFQUNOO0FBQ0osQzs7QUN0QmdFO0FBQ2Y7QUFDWDtBQUNOO0FBQ2hDO0FBQ0E7QUFDQTtBQUNPLE1BQU1xSCx5QkFBeUIsU0FBU25GLDJDQUFxQixDQUFDO0VBQ2pFckMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLElBQUltSCxxQkFBcUIsRUFBRSxDQUFDO0VBQ3RDO0VBQ0EsSUFBSXpDLEdBQUdBLENBQUEsRUFBRztJQUNOLE9BQU8sSUFBSSxDQUFDekMsUUFBUSxDQUFDeUMsR0FBRyxDQUFDdkMsS0FBSztFQUNsQztFQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJc0YsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ1QsTUFBTWhCLE9BQU8sR0FBRyxJQUFJYSxtQ0FBYSxFQUFFLENBQUNJLElBQUksQ0FBQ0QsR0FBRyxFQUFFaEIsT0FBTyxJQUFJO01BQ3JELElBQUksQ0FBQ2tCLFFBQVEsR0FBR2xCLE9BQU8sQ0FBQ21CLEtBQUssQ0FBQ2YsS0FBSztNQUNuQyxJQUFJLENBQUNnQixRQUFRLEdBQUdwQixPQUFPLENBQUNtQixLQUFLLENBQUNkLE1BQU07TUFDcEMsSUFBSSxDQUFDZ0IsWUFBWSxFQUFFO0lBQ3ZCLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQzlGLFFBQVEsQ0FBQ3lDLEdBQUcsQ0FBQ3ZDLEtBQUssR0FBR3VFLE9BQU87SUFDakMsSUFBSSxDQUFDekUsUUFBUSxDQUFDcUYsTUFBTSxDQUFDbkYsS0FBSyxHQUFHdUUsT0FBTyxJQUFJLElBQUk7RUFDaEQ7RUFDQSxJQUFJVSxTQUFTQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ25GLFFBQVEsQ0FBQ21GLFNBQVMsQ0FBQ2pGLEtBQUs7RUFDeEM7RUFDQSxJQUFJaUYsU0FBU0EsQ0FBQ2pGLEtBQUssRUFBRTtJQUNqQixJQUFJLENBQUNGLFFBQVEsQ0FBQ21GLFNBQVMsQ0FBQ2pGLEtBQUssR0FBR0EsS0FBSztFQUN6QztFQUNBLElBQUlrRixTQUFTQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ3BGLFFBQVEsQ0FBQ29GLFNBQVMsQ0FBQ2xGLEtBQUs7RUFDeEM7RUFDQSxJQUFJa0YsU0FBU0EsQ0FBQ2xGLEtBQUssRUFBRTtJQUNqQixJQUFJLENBQUNGLFFBQVEsQ0FBQ29GLFNBQVMsQ0FBQ2xGLEtBQUssR0FBR0EsS0FBSztFQUN6QztFQUNBM0MsT0FBT0EsQ0FBQ3NILEtBQUssRUFBRUMsTUFBTSxFQUFFO0lBQ25CLEtBQUssQ0FBQ3ZILE9BQU8sQ0FBQ3NILEtBQUssRUFBRUMsTUFBTSxDQUFDO0lBQzVCLElBQUksQ0FBQ2lCLGFBQWEsR0FBR2xCLEtBQUs7SUFDMUIsSUFBSSxDQUFDbUIsYUFBYSxHQUFHbEIsTUFBTTtJQUMzQixJQUFJLENBQUNnQixZQUFZLEVBQUU7RUFDdkI7RUFDQUEsWUFBWUEsQ0FBQSxFQUFHO0lBQ1gsSUFBSSxJQUFJLENBQUNILFFBQVEsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDSSxhQUFhLElBQUksSUFBSSxFQUFFO01BQ3JEO0lBQ0o7SUFDQSxNQUFNRSxjQUFjLEdBQUcsSUFBSSxDQUFDRixhQUFhLEdBQUcsSUFBSSxDQUFDQyxhQUFhO0lBQzlELE1BQU1FLFNBQVMsR0FBRyxJQUFJLENBQUNQLFFBQVEsR0FBRyxJQUFJLENBQUNFLFFBQVE7SUFDL0MsSUFBSUksY0FBYyxHQUFHQyxTQUFTLEVBQUU7TUFDNUIsSUFBSSxDQUFDbEcsUUFBUSxDQUFDTixNQUFNLENBQUNRLEtBQUssR0FBRyxJQUFJaEMsNkJBQU8sQ0FBQyxHQUFHLEVBQUVnSSxTQUFTLEdBQUdELGNBQWMsQ0FBQztJQUM3RSxDQUFDLE1BQ0k7TUFDRCxJQUFJLENBQUNqRyxRQUFRLENBQUNOLE1BQU0sQ0FBQ1EsS0FBSyxHQUFHLElBQUloQyw2QkFBTyxDQUFDK0gsY0FBYyxHQUFHQyxTQUFTLEVBQUUsR0FBRyxDQUFDO0lBQzdFO0VBQ0o7QUFDSixDOzs7O0FFNURzQztBQUNPO0FBQ1E7QUFDOUMsTUFBTUMsbUNBQWlCLFNBQVN0RyxnREFBQUEsaUJBQWlCLEdBQUM7RUFDckQ5QixXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLEVBQUU7SUFDUCxJQUFJLENBQUN5QyxjQUFjLEdBQUdGLGNBQWMsRUFBRTtFQUMxQztFQUNBUCxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUNBLFdBQVcsRUFBRTtJQUNuQixJQUFJLENBQUNDLFFBQVEsR0FBR0ssYUFBYSxDQUFDSSxLQUFLLENBQUMsQ0FDaEMsSUFBSSxDQUFDVCxRQUFRLEVBQ2I7TUFDSVAsQ0FBQyxFQUFFO1FBQUVTLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDakJrRyxNQUFNLEVBQUU7UUFBRWxHLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDdEJtRyxNQUFNLEVBQUU7UUFBRW5HLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDdEJvRyxJQUFJLEVBQUU7UUFBRXBHLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDcEJxRyxJQUFJLEVBQUU7UUFBRXJHLEtBQUssRUFBRTtNQUFJO0lBQ3ZCLENBQUMsQ0FDSixDQUFDO0VBQ047QUFDSixDOztBQ3JCd0Q7QUFDUDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1zRyxxQkFBcUIsU0FBU3BHLGdEQUFBQSxxQkFBcUIsR0FBQztFQUM3RCxJQUFJWCxDQUFDQSxDQUFBLEVBQUc7SUFDSixPQUFPLElBQUksQ0FBQ08sUUFBUSxDQUFDUCxDQUFDLENBQUNTLEtBQUs7RUFDaEM7RUFDQSxJQUFJVCxDQUFDQSxDQUFDUyxLQUFLLEVBQUU7SUFDVCxJQUFJLENBQUNGLFFBQVEsQ0FBQ1AsQ0FBQyxDQUFDUyxLQUFLLEdBQUdBLEtBQUs7RUFDakM7RUFDQSxJQUFJa0csTUFBTUEsQ0FBQSxFQUFHO0lBQ1QsT0FBTyxJQUFJLENBQUNwRyxRQUFRLENBQUNvRyxNQUFNLENBQUNsRyxLQUFLO0VBQ3JDO0VBQ0EsSUFBSWtHLE1BQU1BLENBQUNsRyxLQUFLLEVBQUU7SUFDZCxJQUFJLENBQUNGLFFBQVEsQ0FBQ29HLE1BQU0sQ0FBQ2xHLEtBQUssR0FBR0EsS0FBSztFQUN0QztFQUNBLElBQUltRyxNQUFNQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ3JHLFFBQVEsQ0FBQ3FHLE1BQU0sQ0FBQ25HLEtBQUs7RUFDckM7RUFDQSxJQUFJbUcsTUFBTUEsQ0FBQ25HLEtBQUssRUFBRTtJQUNkLElBQUksQ0FBQ0YsUUFBUSxDQUFDcUcsTUFBTSxDQUFDbkcsS0FBSyxHQUFHQSxLQUFLO0VBQ3RDO0VBQ0EsSUFBSW9HLElBQUlBLENBQUEsRUFBRztJQUNQLE9BQU8sSUFBSSxDQUFDdEcsUUFBUSxDQUFDc0csSUFBSSxDQUFDcEcsS0FBSztFQUNuQztFQUNBLElBQUlvRyxJQUFJQSxDQUFDcEcsS0FBSyxFQUFFO0lBQ1osSUFBSSxDQUFDRixRQUFRLENBQUNzRyxJQUFJLENBQUNwRyxLQUFLLEdBQUdBLEtBQUs7RUFDcEM7RUFDQSxJQUFJcUcsSUFBSUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUN2RyxRQUFRLENBQUN1RyxJQUFJLENBQUNyRyxLQUFLO0VBQ25DO0VBQ0EsSUFBSXFHLElBQUlBLENBQUNyRyxLQUFLLEVBQUU7SUFDWixJQUFJLENBQUNGLFFBQVEsQ0FBQ3VHLElBQUksQ0FBQ3JHLEtBQUssR0FBR0EsS0FBSztFQUNwQztFQUNBbkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1YsS0FBSyxDQUFDLElBQUlvSSxpQkFBaUIsRUFBRSxDQUFDO0VBQ2xDO0FBQ0osQzs7OztBRTNDNkM7QUFDQTtBQUNLO0FBQzNDLE1BQU1NLDZCQUFjLFNBQVM1RyxnREFBQUEsaUJBQWlCLEdBQUM7RUFDbEQ5QixXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLEVBQUU7SUFDUCxJQUFJLENBQUN5QyxjQUFjLEdBQUdGLGNBQWMsRUFBRTtFQUMxQztFQUNBUCxXQUFXQSxDQUFBLEVBQUc7SUFDVixLQUFLLENBQUNBLFdBQVcsRUFBRTtJQUNuQixJQUFJLENBQUNDLFFBQVEsR0FBR0ssYUFBYSxDQUFDSSxLQUFLLENBQUMsQ0FDaEMsSUFBSSxDQUFDVCxRQUFRLEVBQ2I7TUFDSTBHLFFBQVEsRUFBRTtRQUFFeEcsS0FBSyxFQUFFO01BQUksQ0FBQztNQUN4Qm5ELEtBQUssRUFBRTtRQUFFbUQsS0FBSyxFQUFFLElBQUloRixLQUFLLENBQUMsUUFBUTtNQUFFO0lBQ3hDLENBQUMsQ0FDSixDQUFDO0VBQ047QUFDSixDOztBQ2xCa0Q7QUFDRDtBQUNqRDtBQUNBO0FBQ0E7QUFDTyxNQUFNeUwsa0JBQWtCLFNBQVN2RyxnREFBQUEscUJBQXFCLEdBQUM7RUFDMUQsSUFBSXJELEtBQUtBLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDaUQsUUFBUSxDQUFDakQsS0FBSyxDQUFDbUQsS0FBSztFQUNwQztFQUNBLElBQUluRCxLQUFLQSxDQUFDbUQsS0FBSyxFQUFFO0lBQ2IsSUFBSSxDQUFDRixRQUFRLENBQUNqRCxLQUFLLENBQUNtRCxLQUFLLEdBQUdBLEtBQUs7RUFDckM7RUFDQSxJQUFJd0csUUFBUUEsQ0FBQSxFQUFHO0lBQ1gsT0FBTyxJQUFJLENBQUMxRyxRQUFRLENBQUMwRyxRQUFRLENBQUN4RyxLQUFLO0VBQ3ZDO0VBQ0EsSUFBSXdHLFFBQVFBLENBQUN4RyxLQUFLLEVBQUU7SUFDaEIsSUFBSSxDQUFDRixRQUFRLENBQUMwRyxRQUFRLENBQUN4RyxLQUFLLEdBQUdBLEtBQUs7RUFDeEM7RUFDQW5DLFdBQVdBLENBQUEsRUFBRztJQUNWLEtBQUssQ0FBQyxJQUFJMEksY0FBYyxFQUFFLENBQUM7RUFDL0I7QUFDSixDOzs7O0FFckIrQjtBQUNJO0FBQ0k7QUFDaEI7QUFDRTtBQUNEO0FBQ1E7QUFDRDs7O0FDUHhCLE1BQU1HLFNBQVMsQ0FBQztFQUNyQixPQUFPQyxpQkFBaUJBLENBQUNDLEdBQUcsRUFBRUMsWUFBWSxFQUFFO0lBQzFDLE1BQU0zQyxJQUFJLEdBQUcyQyxZQUFZLENBQUNuSCxPQUFPLEVBQUU7SUFDbkMsTUFBTW9ILElBQUksR0FBRztNQUNYbkMsS0FBSyxFQUFFVCxJQUFJLENBQUNTLEtBQUs7TUFDakJDLE1BQU0sRUFBRVYsSUFBSSxDQUFDVTtJQUNmLENBQUM7SUFFRCxNQUFNbUMsUUFBUSxHQUFHQSxDQUFBLEtBQU07TUFDckJGLFlBQVksQ0FBQ3hKLE9BQU8sQ0FBQ3lKLElBQUksQ0FBQ25DLEtBQUssRUFBRW1DLElBQUksQ0FBQ2xDLE1BQU0sQ0FBQztJQUMvQyxDQUFDO0lBQ0QsTUFBTW9DLE1BQU0sR0FBR0osR0FBRyxDQUFDSyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQzFDRCxNQUFNLENBQUN0TCxHQUFHLENBQUNvTCxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDSCxRQUFRLENBQUNBLFFBQVEsQ0FBQztJQUM3REMsTUFBTSxDQUFDdEwsR0FBRyxDQUFDb0wsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUNJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ0gsUUFBUSxDQUFDQSxRQUFRLENBQUM7SUFDOURDLE1BQU0sQ0FBQ0csSUFBSSxFQUFFO0VBQ2Y7RUFFQSxPQUFPQyxZQUFZQSxDQUFDSixNQUFNLEVBQUVLLE1BQU0sRUFBRUMsUUFBUSxHQUFHLE9BQU8sRUFBRTtJQUN0RCxNQUFNUixJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsTUFBTVMsV0FBVyxHQUFHRixNQUFNLENBQUNDLFFBQVEsQ0FBQztJQUNwQ1IsSUFBSSxDQUFDUSxRQUFRLENBQUMsR0FBR0MsV0FBVyxDQUFDQyxNQUFNLEVBQUU7SUFDckNSLE1BQU0sQ0FBQ1MsUUFBUSxDQUFDWCxJQUFJLEVBQUVRLFFBQVEsQ0FBQyxDQUFDUCxRQUFRLENBQUV2RSxHQUFHLElBQUs7TUFDaEQrRSxXQUFXLENBQUMzRSxNQUFNLENBQUNKLEdBQUcsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFDRixPQUFPc0UsSUFBSTtFQUNiO0FBQ0YsQzs7OztBQzFCOEU7QUFDNUM7QUFDUjtBQUMwQztBQUM1QjtBQUM4QjtBQUNHO0FBRXpFLE1BQU1vQixLQUFLLENBQUM7RUFDVnJLLFdBQVdBLENBQUEsRUFBRztJQUNaLE1BQU1qQyxDQUFDLEdBQUcsR0FBRztJQUNiLE1BQU1DLENBQUMsR0FBRyxHQUFHO0lBRWIsTUFBTU4sS0FBSyxHQUFHRixnQkFBZ0IsRUFBRTtJQUNoQ0UsS0FBSyxDQUFDNE0sR0FBRyxHQUFHLElBQUlULHlCQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUM7SUFDdENyTSxnQkFBZ0IsQ0FBQ0UsS0FBSyxDQUFDO0lBQ3ZCLE1BQU1TLE1BQU0sR0FBR1gsaUJBQWlCLENBQUNFLEtBQUssRUFBRUssQ0FBQyxFQUFFQyxDQUFDLENBQUM7SUFDN0MsTUFBTW1CLFFBQVEsR0FBRzNCLG1CQUFtQixDQUFDTyxDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUMxQyxNQUFNVSxPQUFPLEdBQUdsQixrQkFBa0IsQ0FBQ1csTUFBTSxFQUFFZ0IsUUFBUSxDQUFDO0lBQ3BEM0IsaUJBQWlCLENBQUNFLEtBQUssQ0FBQztJQUN4QixJQUFJLENBQUM2TSxVQUFVLENBQUM3TSxLQUFLLENBQUM7SUFFdEIsSUFBSSxDQUFDc0wsWUFBWSxHQUFHLElBQUkxSSxtQkFBbUIsQ0FBQzVDLEtBQUssRUFBRVMsTUFBTSxFQUFFZ0IsUUFBUSxDQUFDO0lBQ3BFLE1BQU1xTCxJQUFJLEdBQUcsSUFBSWhELHlCQUF5QixFQUFFO0lBQzVDZ0QsSUFBSSxDQUFDL0MsT0FBTyxDQUFDLHlCQUF5QixDQUFDO0lBQ3ZDO0lBQ0E7O0lBRUEsTUFBTWdELEVBQUUsR0FBRyxJQUFJUCx3QkFBUSxFQUFFO0lBQ3pCLElBQUksQ0FBQ2xCLFlBQVksQ0FBQ2pJLFdBQVcsQ0FBQyxDQUFDeUosSUFBSSxFQUFFQyxFQUFFLENBQUMsQ0FBQztJQUV6Q04sMkJBQVksQ0FBQ0Msd0NBQXVCLEVBQUUsSUFBSSxDQUFDcEIsWUFBWSxDQUFDeEssTUFBTSxDQUFDO0lBRS9ELElBQUksQ0FBQ29NLE9BQU8sQ0FBQ0osSUFBSSxDQUFDO0VBQ3BCO0VBRUFELFVBQVVBLENBQUM3TSxLQUFLLEVBQUU7SUFDaEIsTUFBTW1OLEdBQUcsR0FBRyxJQUFJYixvQ0FBYyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzFDLE1BQU03RixHQUFHLEdBQUcsSUFBSTRGLHlDQUFtQixDQUFDO01BQ2xDTyxHQUFHLEVBQUU1TSxLQUFLLENBQUM0TSxHQUFHLEtBQUtRO0lBQ3JCLENBQUMsQ0FBQztJQUNGM0csR0FBRyxDQUFDbkYsS0FBSyxHQUFHLElBQUk3QiwyQkFBSyxDQUFDLFFBQVEsQ0FBQztJQUMvQjtJQUNBLE1BQU00TixNQUFNLEdBQUcsSUFBSWpCLDBCQUFJLENBQUNlLEdBQUcsRUFBRTFHLEdBQUcsQ0FBQztJQUNqQ3pHLEtBQUssQ0FBQ0csR0FBRyxDQUFDa04sTUFBTSxDQUFDO0lBRWpCLE1BQU1DLFNBQVMsR0FBRyxJQUFJbEIsMEJBQUksQ0FBQ2UsR0FBRyxFQUFFMUcsR0FBRyxDQUFDUyxLQUFLLEVBQUUsQ0FBQztJQUM1Q29HLFNBQVMsQ0FBQzVNLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDWCxLQUFLLENBQUNHLEdBQUcsQ0FBQ21OLFNBQVMsQ0FBQztJQUVwQixNQUFNQyxXQUFXLEdBQUcsSUFBSW5CLDBCQUFJLENBQUNlLEdBQUcsRUFBRTFHLEdBQUcsQ0FBQztJQUN0QzhHLFdBQVcsQ0FBQzdNLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkNYLEtBQUssQ0FBQ0csR0FBRyxDQUFDb04sV0FBVyxDQUFDO0VBQ3hCO0VBRUFMLE9BQU9BLENBQUNKLElBQUksRUFBRTtJQUNaLE1BQU16QixHQUFHLEdBQUcsSUFBSWtCLDJCQUFHLEVBQUU7SUFDckIsSUFBSSxDQUFDaUIsYUFBYSxDQUFDbkMsR0FBRyxFQUFFeUIsSUFBSSxDQUFDO0lBQzdCM0IsMkJBQTJCLENBQUNFLEdBQUcsRUFBRSxJQUFJLENBQUNDLFlBQVksQ0FBQztFQUNyRDtFQUVBa0MsYUFBYUEsQ0FBQ25DLEdBQUcsRUFBRXlCLElBQUksRUFBRTtJQUN2QixNQUFNdkIsSUFBSSxHQUFHO01BQ1g7SUFBQSxDQUNEO0lBQ0QsTUFBTUUsTUFBTSxHQUFHSixHQUFHLENBQUNLLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQztJQUNoREQsTUFBTSxDQUFDdEwsR0FBRyxDQUFDMk0sSUFBSSxFQUFFLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkRGLE1BQU0sQ0FBQ3RMLEdBQUcsQ0FBQzJNLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25EO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQUYsTUFBTSxDQUFDRyxJQUFJLEVBQUU7RUFDZjtBQUNGO0FBRUE1SixNQUFNLENBQUN5TCxNQUFNLEdBQUcsTUFBTTtFQUNwQixNQUFNQyxLQUFLLEdBQUcsSUFBSWYsS0FBSyxFQUFFO0FBQzNCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZGVtb1NyYy9Db21tb24uanM/MmMwNyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIuanM/ZTUzZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzUmVuZGVyZXIuanM/MGZjZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzU2hhZGVyLmpzPzQwYTIiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9wb3N0cHJvY2Vzcy9Qb3N0UHJvY2Vzc1NoYWRlclBhc3MuanM/ZDhiMyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL2luZGV4LmpzP2FkMzciLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9wZXJpcGhlcmFsTGlnaHQvUGVyaXBoZXJhbExpZ2h0U2hhZGVyLmpzPzhiZmMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9wZXJpcGhlcmFsTGlnaHQvUGVyaXBoZXJhbExpZ2h0U2hhZGVyUGFzcy5qcz9hY2I2Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vcGVyaXBoZXJhbExpZ2h0L2luZGV4LmpzPzczMjciLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9jaHJvbWF0aWNBYmVycmF0aW9uL0Nocm9tYXRpY0FiZXJyYXRpb25TaGFkZXIuanM/YzNkNCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Nocm9tYXRpY0FiZXJyYXRpb24vQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlclBhc3MuanM/NzQ5ZiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Nocm9tYXRpY0FiZXJyYXRpb24vaW5kZXguanM/YjY2MiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21peC9NaXhTaGFkZXIuanM/MzE5ZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21peC9NaXhTaGFkZXJQYXNzLmpzPzFhYTYiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9taXgvaW5kZXguanM/NzUzMiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Jsb29tL01hdGVyaWFsU3RvcmFnZS5qcz84NGY1Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vYmxvb20vTWF0ZXJpYWxTd2l0Y2hlci5qcz9lZjAwIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vYmxvb20vQmxvb21FZmZlY3RDb21wb3Nlci5qcz9mZGFhIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vYmxvb20vaW5kZXguanM/OWMxYiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Z4YWEvRlhBQVNoYWRlclBhc3MuanM/ZTYyOCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Z4YWEvaW5kZXguanM/Mjc4MyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Rpc3BsYWNlbWVudC9EaXNwbGFjZW1lbnRNYXAuZnJhZy5nbHNsLmpzPzU1ZWYiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9kaXNwbGFjZW1lbnQvRGlzcGxhY2VtZW50TWFwU2hhZGVyLmpzP2JmN2EiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9kaXNwbGFjZW1lbnQvRGlzcGxhY2VtZW50TWFwU2hhZGVyUGFzcy5qcz9kOTFkIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vZGlzcGxhY2VtZW50L2luZGV4LmpzPzhjYTMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9jb2xvckZpbHRlci9Db2xvckZpbHRlclNoYWRlci5qcz8yNDczIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vY29sb3JGaWx0ZXIvQ29sb3JGaWx0ZXJTaGFkZXJQYXNzLmpzP2VjYzQiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9jb2xvckZpbHRlci9pbmRleC5qcz80YjhmIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vbW9ub3RvbmUvTW9ub3RvbmVTaGFkZXIuanM/YTVjNSIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21vbm90b25lL01vbm90b25lU2hhZGVyUGFzcy5qcz8wNjJjIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vbW9ub3RvbmUvaW5kZXguanM/MmQ5MyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2RlbW9TcmMvQ29tbW9uR1VJLmpzPzcxZDAiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2RlbW9TcmMvZGVtb0Rpc3BsYWNlbWVudC5qcz82YTA2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFtYmllbnRMaWdodCxcbiAgQXhlc0hlbHBlcixcbiAgQ29sb3IsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgV2ViR0xSZW5kZXJlcixcbn0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21tb24ge1xuICBzdGF0aWMgaW5pdFNjZW5lKCkge1xuICAgIGNvbnN0IHNjZW5lID0gbmV3IFNjZW5lKCk7XG4gICAgcmV0dXJuIHNjZW5lO1xuICB9XG5cbiAgc3RhdGljIGluaXRMaWdodChzY2VuZSkge1xuICAgIGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBBbWJpZW50TGlnaHQoMHhmZmZmZmYsIDEuMCk7XG4gICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG4gICAgcmV0dXJuIGFtYmllbnRMaWdodDtcbiAgfVxuXG4gIHN0YXRpYyBpbml0Q2FtZXJhKHNjZW5lLCBXLCBILCBuZWFyID0gMSwgZmFyID0gNDAwKSB7XG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCBXIC8gSCwgbmVhciwgZmFyKTtcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEwMCk7XG4gICAgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKGZhbHNlKTtcbiAgICBzY2VuZS5hZGQoY2FtZXJhKTtcbiAgICByZXR1cm4gY2FtZXJhO1xuICB9XG5cbiAgc3RhdGljIGluaXRDb250cm9sKGNhbWVyYSwgcmVuZGVyKSB7XG4gICAgbGV0IGRvbUVsZW1lbnQ7XG4gICAgaWYgKHJlbmRlcikge1xuICAgICAgZG9tRWxlbWVudCA9IHJlbmRlci5kb21FbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBjb250cm9sID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCBkb21FbGVtZW50KTtcbiAgICBjb250cm9sLnVwZGF0ZSgpO1xuICAgIHJldHVybiBjb250cm9sO1xuICB9XG5cbiAgc3RhdGljIGluaXRSZW5kZXJlcihXLCBILCBvcHRpb24pIHtcbiAgICBvcHRpb24gPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBjb2xvcjogMHgwMDAwMDAsXG4gICAgICAgIGlkOiBcIndlYmdsLWNhbnZhc1wiLFxuICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICB9LFxuICAgICAgb3B0aW9uXG4gICAgKTtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBXZWJHTFJlbmRlcmVyKHtcbiAgICAgIGNhbnZhczogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9uLmlkKSxcbiAgICAgIGFudGlhbGlhczogb3B0aW9uLmFudGlhbGlhcyxcbiAgICB9KTtcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKG5ldyBDb2xvcihvcHRpb24uY29sb3IpKTtcbiAgICByZW5kZXJlci5zZXRTaXplKFcsIEgpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIHJldHVybiByZW5kZXJlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0SGVscGVyKHNjZW5lKSB7XG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBBeGVzSGVscGVyKDMwKTtcbiAgICBzY2VuZS5hZGQoYXhlc0hlbHBlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVmZmVjdENvbXBvc2VyIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9FZmZlY3RDb21wb3NlclwiO1xuLyoqXG4gKiDjg6zjg7Pjg4Djg6rjg7PjgrDjga7liY3lvozjgavku7vmhI/jga7lh6bnkIbjgpLlrp/ooYzjgZnjgovmqZ/og73jgpLov73liqDjgZfjgZ9FZmZlY3RDb21wb3Nlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIgZXh0ZW5kcyBFZmZlY3RDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMiwgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFJlbmRlclBhc3MgfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL1JlbmRlclBhc3NcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIgfSBmcm9tIFwiLi9Qb3N0UHJvY2Vzc0VmZmVjdENvbXBvc2VyXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXJFdmVudCB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbi8qKlxuICog6KSH5pWw44Gu44Ko44OV44Kn44Kv44OI44Kz44Oz44Od44O844K244O844Go44CBV2ViR0xSZW5kZXJlcuOCkueuoeeQhuOBl+OAgVxuICog6YCj57aa44GX44Gm44Od44K544OI44Ko44OV44Kn44Kv44OI5Yem55CG44KS6KGM44GG44Gf44KB44Gu44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBQb3N0UHJvY2Vzc1JlbmRlcmVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSwgY2FtZXJhLCByZW5kZXJlcikge1xuICAgICAgICB0aGlzLl9jb21wb3NlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5yZW5kZXIgPSAoYXJnKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGVsdGE7XG4gICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgUkFGVGlja2VyRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBkZWx0YSA9IGFyZy5kZWx0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbHRhID0gYXJnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY29tcG9zZXJzLmZvckVhY2goKGNvbXBvc2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wb3Nlci5lbmFibGVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvc2VyLm9uQmVmb3JlUmVuZGVyKVxuICAgICAgICAgICAgICAgICAgICBjb21wb3Nlci5vbkJlZm9yZVJlbmRlcihkZWx0YSk7XG4gICAgICAgICAgICAgICAgY29tcG9zZXIucmVuZGVyKGRlbHRhKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9zZXIub25BZnRlclJlbmRlcilcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zZXIub25BZnRlclJlbmRlcihkZWx0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuICAgIH1cbiAgICBnZXQgY29tcG9zZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29tcG9zZXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgrfjgqfjg7zjg4Djg7zjg5HjgrnjgpLmjJ/jgpPjgaBFZmZlY3RDb21wb3NlcuOCkueUn+aIkOOAgeeZu+mMsuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwYXNzZXNcbiAgICAgKiBAcGFyYW0gcmVuZGVyUGFzc1xuICAgICAqL1xuICAgIGFkZENvbXBvc2VyKHBhc3NlcywgcmVuZGVyUGFzcykge1xuICAgICAgICBjb25zdCBjb21wb3NlciA9IFBvc3RQcm9jZXNzUmVuZGVyZXIuZ2V0Q29tcG9zZXIocGFzc2VzLCB0aGlzLnJlbmRlcmVyLCB7XG4gICAgICAgICAgICBzY2VuZTogdGhpcy5zY2VuZSxcbiAgICAgICAgICAgIGNhbWVyYTogdGhpcy5jYW1lcmEsXG4gICAgICAgICAgICByZW5kZXJQYXNzOiByZW5kZXJQYXNzLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY29tcG9zZXJzLnB1c2goY29tcG9zZXIpO1xuICAgICAgICByZXR1cm4gY29tcG9zZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCs+ODs+ODneODvOOCtuODvOOCkueUn+aIkOOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwYXNzZXNcbiAgICAgKiBAcGFyYW0gcmVuZGVyZXJcbiAgICAgKiBAcGFyYW0gcmVuZGVyUGFzc09wdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDb21wb3NlcihwYXNzZXMsIHJlbmRlcmVyLCByZW5kZXJQYXNzT3B0aW9uKSB7XG4gICAgICAgIFJlbmRlclBhc3NPcHRpb24uaW5pdChyZW5kZXJQYXNzT3B0aW9uKTtcbiAgICAgICAgY29uc3QgY29tcG9zZXIgPSBuZXcgUG9zdFByb2Nlc3NFZmZlY3RDb21wb3NlcihyZW5kZXJlcik7XG4gICAgICAgIGNvbXBvc2VyLmFkZFBhc3MocmVuZGVyUGFzc09wdGlvbi5yZW5kZXJQYXNzKTtcbiAgICAgICAgcGFzc2VzLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgICAgIGNvbXBvc2VyLmFkZFBhc3MocCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29tcG9zZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCpuOCo+ODs+ODieOCpuODquOCteOCpOOCuuaZguOBruWHpueQhlxuICAgICAqIEBwYXJhbSB3XG4gICAgICogQHBhcmFtIGhcbiAgICAgKi9cbiAgICBzZXRTaXplKHcsIGgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gdyAvIGg7XG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHcsIGgpO1xuICAgICAgICB0aGlzLl9jb21wb3NlcnMuZm9yRWFjaCgoY29tcG9zZXIpID0+IHtcbiAgICAgICAgICAgIGNvbXBvc2VyLnNldFNpemUodywgaCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXZWJHTFJlbmRlcmVy44Gu44Os44Oz44OA44Oq44Oz44Kw44K144Kk44K644KS5Y+W5b6X44GZ44KL44CCXG4gICAgICovXG4gICAgZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0U2l6ZShuZXcgVmVjdG9yMigpKTtcbiAgICB9XG59XG4vKipcbiAqIGdldENvbXBvc2Vy6Zai5pWw44Gn5Yip55So44GZ44KLUmVuZGVyUGFzc+WIneacn+WMluOCquODl+OCt+ODp+ODs1xuICpcbiAqIHNjZW5l44GoY2FtZXJh44Gu44K744OD44OI44CB44KC44GX44GP44GvcmVuZGVyUGFzc+OCpOODs+OCueOCv+ODs+OCueOCkuS7o+WFpeOBmeOCi+W/heimgeOBjOOBguOCi+OAglxuICogc2NlbmXjgahjYW1lcmHjga7jgrvjg4Pjg4jjga7loLTlkIggOiBSZW5kZXJQYXNz44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GZ44KL44CCXG4gKiByZW5kZXJQYXNz44Kk44Oz44K544K/44Oz44K544Gu5aC05ZCIIDog44Gd44Gu44G+44G+cmVuZGVyUGFzc+OCpOODs+OCueOCv+ODs+OCueOCkuWIqeeUqOOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyUGFzc09wdGlvbiB7XG4gICAgc3RhdGljIGluaXQob3B0aW9uKSB7XG4gICAgICAgIGlmIChvcHRpb24ucmVuZGVyUGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb24ucmVuZGVyUGFzcyA9IG5ldyBSZW5kZXJQYXNzKG9wdGlvbi5zY2VuZSwgb3B0aW9uLmNhbWVyYSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKipcbiAqIEVmZmVjdENvbXBvc2Vy55So44GuU2hhZGVy44Kq44OW44K444Kn44Kv44OI44Gr5b+F6KaB44Gq6KaB57Sg44KS5a6a576p44GX44Gf44Kv44Op44K544CCXG4gKiDjgZPjga7jgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpJTaGFkZXJQYXNz44Gr5rih44GZ44GT44Go44Gn44CB5Lu75oSP44Gu44K344Kn44O844OA44O844Ko44OV44Kn44Kv44OI44Kz44Oz44Od44O844K244O844Gr44Gq44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBQb3N0UHJvY2Vzc1NoYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vbGFuZ3VhZ2U9R0xTTFxuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9IGBcbiAgICB2YXJ5aW5nIHZlYzIgdlV2O1xuICAgIHZvaWQgbWFpbigpIHtcbiAgICAgIHZVdiA9IHV2O1xuICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuICAgIH1cbiAgYDtcbiAgICAgICAgdGhpcy5pbml0VW5pZm9ybSgpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybSgpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IHtcbiAgICAgICAgICAgIHREaWZmdXNlOiB7IHZhbHVlOiBudWxsIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTaGFkZXJQYXNzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9TaGFkZXJQYXNzXCI7XG5leHBvcnQgY2xhc3MgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIGV4dGVuZHMgU2hhZGVyUGFzcyB7XG4gICAgZ2V0IHREaWZmdXNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy50RGlmZnVzZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHREaWZmdXNlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMudERpZmZ1c2UudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9Qb3N0UHJvY2Vzc1JlbmRlcmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Qb3N0UHJvY2Vzc1NoYWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vUG9zdFByb2Nlc3NTaGFkZXJQYXNzXCI7XG4iLCJpbXBvcnQgeyBVbmlmb3Jtc1V0aWxzLCBDb2xvciB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXIgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9QZXJpcGhlcmFsTGlnaHQuZnJhZy5nbHNsXCI7XG5leHBvcnQgY2xhc3MgUGVyaXBoZXJhbExpZ2h0U2hhZGVyIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gRnJhZ21lbnRTaGFkZXIoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm0oKSB7XG4gICAgICAgIHN1cGVyLmluaXRVbmlmb3JtKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmF0ZTogeyB2YWx1ZTogNS4wIH0sXG4gICAgICAgICAgICAgICAgcmFkaXVzSW5uZXI6IHsgdmFsdWU6IDAuNzUgfSxcbiAgICAgICAgICAgICAgICByYWRpdXNPdXRlcjogeyB2YWx1ZTogTWF0aC5zcXJ0KDIuMCkgfSxcbiAgICAgICAgICAgICAgICBjb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDAsIDAsIDApIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGVyaXBoZXJhbExpZ2h0U2hhZGVyIH0gZnJvbSBcIi4vUGVyaXBoZXJhbExpZ2h0U2hhZGVyXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlclBhc3MgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbi8qKlxuICog5ZGo6L665YWJ6YeP44Gu5rib5YWJ44KS6KGo54++44GZ44KL44OV44Kj44Or44K/44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBQZXJpcGhlcmFsTGlnaHRTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICBnZXQgcmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmF0ZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5yYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByYWRpdXNJbm5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmFkaXVzSW5uZXIudmFsdWU7XG4gICAgfVxuICAgIHNldCByYWRpdXNJbm5lcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhZGl1c0lubmVyLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByYWRpdXNPdXRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmFkaXVzT3V0ZXIudmFsdWU7XG4gICAgfVxuICAgIHNldCByYWRpdXNPdXRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhZGl1c091dGVyLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuY29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBjb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihuZXcgUGVyaXBoZXJhbExpZ2h0U2hhZGVyKCkpO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL1BlcmlwaGVyYWxMaWdodFNoYWRlclBhc3NcIjtcbiIsImltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vQ2hyb21hdGljQWJlcnJhdGlvbi5mcmFnLmdsc2xcIjtcbmV4cG9ydCBjbGFzcyBDaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gRnJhZ21lbnRTaGFkZXIoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm0oKSB7XG4gICAgICAgIHN1cGVyLmluaXRVbmlmb3JtKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmF0ZTogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgcmFkaXVzSW5uZXI6IHsgdmFsdWU6IDAuMjUgfSxcbiAgICAgICAgICAgICAgICByYWRpdXNPdXRlcjogeyB2YWx1ZTogTWF0aC5zcXJ0KDIuMCkgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyIH0gZnJvbSBcIi4vQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlclwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5leHBvcnQgY2xhc3MgQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIGdldCByYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmF0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJhZGl1c0lubmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYWRpdXNJbm5lci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhZGl1c0lubmVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzSW5uZXIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJhZGl1c091dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYWRpdXNPdXRlci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhZGl1c091dGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzT3V0ZXIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKG5ldyBDaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyKCkpO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL0Nocm9tYXRpY0FiZXJyYXRpb25TaGFkZXJQYXNzXCI7XG4iLCJpbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL01peFNoYWRlci5mcmFnLmdsc2xcIjtcbmltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmV4cG9ydCBjbGFzcyBNaXhTaGFkZXIgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBGcmFnbWVudFNoYWRlcigpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdFVuaWZvcm0oKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtaXhUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgeyBNaXhTaGFkZXIgfSBmcm9tIFwiLi9NaXhTaGFkZXJcIjtcbi8qKlxuICog5LuW44Gu44Ko44OV44Kn44Kv44OI44Kz44Oz44Od44O844K244O844Gu5o+P55S757WQ5p6c44KS5Y+X44GR5Y+W44KK44CB6Ieq6Lqr44Gu44Os44Oz44OA44Oq44Oz44Kw57WQ5p6c44Gr5LmX566X44GZ44KLU2hhZGVyUGFzc1xuICovXG5leHBvcnQgY2xhc3MgTWl4U2hhZGVyUGFzcyBleHRlbmRzIFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB7XG4gICAgZ2V0IG1peFRleHR1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm1peFRleHR1cmUudmFsdWU7XG4gICAgfVxuICAgIHNldCBtaXhUZXh0dXJlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubWl4VGV4dHVyZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihtaXhUZXh0dXJlKSB7XG4gICAgICAgIHN1cGVyKG5ldyBNaXhTaGFkZXIoKSk7XG4gICAgICAgIHRoaXMubWl4VGV4dHVyZSA9IG1peFRleHR1cmU7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vTWl4U2hhZGVyUGFzc1wiO1xuIiwiLyoqXG4gKiBCbG9vbeioreWumuOBq+W/nOOBmOOBpuOAgeOCquODquOCuOODiuODq+OBruODnuODhuODquOCouODq+OCkuagvOe0jeOBmeOCi+OBn+OCgeOBruOCquODluOCuOOCp+OCr+ODiOOAglxuICogT2JqZWN0M0QudXNlckRhdGEubWF0ZXJpYWxTdG9yYWdl44Gr5qC857SN44GV44KM44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbFN0b3JhZ2Uge1xuICAgIHVwZGF0ZU1hdGVyaWFsKG9yaWdpbmFsKSB7XG4gICAgICAgIHRoaXMub3JpZ2luYWwgPSBvcmlnaW5hbDtcbiAgICAgICAgdGhpcy5jb3B5TWF0ZXJpYWxBcnJheSgpO1xuICAgICAgICB0aGlzLmRhcmtlbk1hdGVyaWFsQXJyYXkodGhpcy5kYXJrKTtcbiAgICB9XG4gICAgY29weU1hdGVyaWFsQXJyYXkoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ2xvbmUoKSkge1xuICAgICAgICAgICAgdGhpcy5jbG9uZVRvRGFyaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb3B5VG9EYXJrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogZGFya2Vu44Oe44OG44Oq44Ki44Or44Gu44Kz44OU44O844Gr44CB44Kv44Ot44O844Oz44KS5L2/55So44GZ44KL44GLY29weeOCkuS9v+eUqOOBmeOCi+OBi+OCkuWIpOWumuOBmeOCi+OAglxuICAgICAqL1xuICAgIGlzQ2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGRhcmtlbkhlYWQgPSB0aGlzLmdldEhlYWRNYXRlcmlhbCh0aGlzLmRhcmspO1xuICAgICAgICBjb25zdCBvcmlnaW5hbEhlYWQgPSB0aGlzLmdldEhlYWRNYXRlcmlhbCh0aGlzLm9yaWdpbmFsKTtcbiAgICAgICAgaWYgKGRhcmtlbkhlYWQgPT0gbnVsbCB8fCBkYXJrZW5IZWFkLnR5cGUgIT09IG9yaWdpbmFsSGVhZC50eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGdldEhlYWRNYXRlcmlhbChtYXQpIHtcbiAgICAgICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkobWF0KTtcbiAgICAgICAgaWYgKGlzQXJyYXkpXG4gICAgICAgICAgICByZXR1cm4gbWF0WzBdO1xuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH1cbiAgICBjb3B5VG9EYXJrKCkge1xuICAgICAgICBjb25zdCBpc0FycmF5T3JpZ2luYWwgPSBBcnJheS5pc0FycmF5KHRoaXMub3JpZ2luYWwpO1xuICAgICAgICBpZiAoaXNBcnJheU9yaWdpbmFsKSB7XG4gICAgICAgICAgICB0aGlzLmRhcmsuZm9yRWFjaCgoZHJrLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGRyay5jb3B5KHRoaXMub3JpZ2luYWxbaW5kZXhdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXJrLmNvcHkodGhpcy5vcmlnaW5hbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvbmVUb0RhcmsoKSB7XG4gICAgICAgIGNvbnN0IGlzQXJyYXlPcmlnaW5hbCA9IEFycmF5LmlzQXJyYXkodGhpcy5vcmlnaW5hbCk7XG4gICAgICAgIGlmIChpc0FycmF5T3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGFyayA9IHRoaXMub3JpZ2luYWwubWFwKHZhbCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5jbG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhcmsgPSB0aGlzLm9yaWdpbmFsLmNsb25lKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGFya2VuTWF0ZXJpYWxBcnJheShtYXRlcmlhbCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICBNYXRlcmlhbFN0b3JhZ2UuZGFya2VuTWF0ZXJpYWwobWF0ZXJpYWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1hdGVyaWFsLmZvckVhY2gobWF0ID0+IHtcbiAgICAgICAgICAgIE1hdGVyaWFsU3RvcmFnZS5kYXJrZW5NYXRlcmlhbChtYXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oe44OG44Oq44Ki44Or44KS5Y+N5bCE5YWJ44Gu44Gq44GE6buS44Gr5pu444GN5o+b44GI44KL44CCXG4gICAgICogQHBhcmFtIG1hdGVyaWFsXG4gICAgICovXG4gICAgc3RhdGljIGRhcmtlbk1hdGVyaWFsKG1hdGVyaWFsKSB7XG4gICAgICAgIGlmIChtYXRlcmlhbFtcImNvbG9yXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsW1wiY29sb3JcIl0uc2V0SGV4KDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbFtcInNoaW5pbmVzc1wiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbFtcInNoaW5pbmVzc1wiXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGVyaWFsW1wic3BlY3VsYXJcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWxbXCJzcGVjdWxhclwiXS5zZXRIZXgoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGVyaWFsW1wiZW1pc3NpdmVcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWxbXCJlbWlzc2l2ZVwiXS5zZXRIZXgoMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMYXllcnMgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IEJsb29tRWZmZWN0Q29tcG9zZXIgfSBmcm9tIFwiLi9CbG9vbUVmZmVjdENvbXBvc2VyXCI7XG5pbXBvcnQgeyBNYXRlcmlhbFN0b3JhZ2UgfSBmcm9tIFwiLi9NYXRlcmlhbFN0b3JhZ2VcIjtcbi8qKlxuICog5YiH44KK5pu/44GI5Y+v6IO944GqVW5yZWFsQmxvb21QYXNz44Gr44GK44GE44Gm44CB44Oe44OG44Oq44Ki44Or44Gu5YiH44KK5pu/44GI5Yem55CG44KS5ouF5b2T44GZ44KL44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbFN3aXRjaGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuICAgICAgICB0aGlzLmRhcmtlbk5vbkJsb29tZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnRyYXZlcnNlVmlzaWJsZSh0aGlzLnN3aXRjaFRvRGFya2VuKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZXN0b3JlTWF0ZXJpYWwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnRyYXZlcnNlVmlzaWJsZSh0aGlzLnN3aXRjaFRvT3JpZ2luYWxNYXRlcmlhbCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY2VuZeS4iuOBruWQhOOCquODluOCuOOCp+OCr+ODiOOBq+WvvuOBl+OBpuOAgeODnuODhuODquOCouODq+OBruWIh+OCiuabv+OBiOOCkuihjOOBhuOAglxuICAgICAgICAgKiBibG9vbeWvvuixoeWkluOBp+OBguOCjOOBsCMwMDDjga7jg57jg4bjg6rjgqLjg6vjgavjgIJcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG9iaiBzY2VuZeOCknRyYXZlcnNl44GX44Gm5Y+W5b6X44GX44Gf44Kq44OW44K444Kn44Kv44OI44CCXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN3aXRjaFRvRGFya2VuID0gKG9iaikgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGFya2VuKG9iaikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG9iai51c2VyRGF0YS5tYXRlcmlhbFN0b3JhZ2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9iai51c2VyRGF0YS5tYXRlcmlhbFN0b3JhZ2UgPSBuZXcgTWF0ZXJpYWxTdG9yYWdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gb2JqLnVzZXJEYXRhLm1hdGVyaWFsU3RvcmFnZTtcbiAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBvYmo7XG4gICAgICAgICAgICBzdG9yYWdlLnVwZGF0ZU1hdGVyaWFsKG1lc2gubWF0ZXJpYWwpO1xuICAgICAgICAgICAgbWVzaC5tYXRlcmlhbCA9IHN0b3JhZ2UuZGFyaztcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOODnuODhuODquOCouODq+OCueODiOODrOODvOOCuOOBq+agvOe0jeOBleOCjOOBn+OCquODquOCuOODiuODq+OBruODnuODhuODquOCouODq+ioreWumuOBq+W+qeW4sOOBmeOCi+OAglxuICAgICAgICAgKiBAcGFyYW0gb2JqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN3aXRjaFRvT3JpZ2luYWxNYXRlcmlhbCA9IChvYmopID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0RhcmtlbihvYmopKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBvYmo7XG4gICAgICAgICAgICBtZXNoLm1hdGVyaWFsID0gb2JqLnVzZXJEYXRhLm1hdGVyaWFsU3RvcmFnZS5vcmlnaW5hbDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuICAgICAgICB0aGlzLmxheWVycyA9IG5ldyBMYXllcnMoKTtcbiAgICAgICAgdGhpcy5sYXllcnMuc2V0KEJsb29tRWZmZWN0Q29tcG9zZXIuQkxPT00pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgZ3jga7jgqrjg5bjgrjjgqfjgq/jg4jjgYxibG9vbeODnuOCueOCr+OBruWvvuixoeOBi+WQpuOBi+OCkuWIpOWumuOBmeOCi+OAglxuICAgICAqIEBwYXJhbSBvYmpcbiAgICAgKi9cbiAgICBpc0RhcmtlbihvYmopIHtcbiAgICAgICAgaWYgKG9iai5pc01lc2ggPT0gbnVsbCAmJiBvYmouaXNMaW5lID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiAhdGhpcy5sYXllcnMudGVzdChvYmoubGF5ZXJzKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc0VmZmVjdENvbXBvc2VyIH0gZnJvbSBcIi4uL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXJcIjtcbmltcG9ydCB7IFVucmVhbEJsb29tUGFzcyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvVW5yZWFsQmxvb21QYXNzXCI7XG5pbXBvcnQgeyBSZW5kZXJQYXNzT3B0aW9uIH0gZnJvbSBcIi4uL3Bvc3Rwcm9jZXNzXCI7XG5pbXBvcnQgeyBNYXRlcmlhbFN3aXRjaGVyIH0gZnJvbSBcIi4vTWF0ZXJpYWxTd2l0Y2hlclwiO1xuLyoqXG4gKiDliIfjgormm7/jgYjlj6/og73jgapVbnJlYWxCbG9vbVBhc3PjgpLlhoXljIXjgZfjgZ9FZmZlY3RDb21wb3Nlci5cbiAqIEJsb29tRWZmZWN0Q29tcG9zZXIuQkxPT03jg6zjgqTjg6Tjg7zjgavlkKvjgb7jgozjgovjgqrjg5bjgrjjgqfjgq/jg4jjga7jgb/jgpJCbG9vbeOBleOBm+OCiy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJsb29tRWZmZWN0Q29tcG9zZXIgZXh0ZW5kcyBQb3N0UHJvY2Vzc0VmZmVjdENvbXBvc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSwgcmVuZGVyZXIsIHJlbmRlclBhc3NPcHRpb24pIHtcbiAgICAgICAgc3VwZXIocmVuZGVyZXIpO1xuICAgICAgICB0aGlzLnN3aXRjaGVyID0gbmV3IE1hdGVyaWFsU3dpdGNoZXIoc2NlbmUpO1xuICAgICAgICBjb25zdCBzaXplID0gcmVuZGVyZXIuZ2V0U2l6ZShuZXcgVmVjdG9yMigpKTtcbiAgICAgICAgdGhpcy5ibG9vbVBhc3MgPSBuZXcgVW5yZWFsQmxvb21QYXNzKHNpemUsIDEuNSwgMC40LCAwLjQpO1xuICAgICAgICAvLyBUT0RPIDogUFIgZC50c1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMucmVuZGVyVG9TY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgUmVuZGVyUGFzc09wdGlvbi5pbml0KHJlbmRlclBhc3NPcHRpb24pO1xuICAgICAgICB0aGlzLmFkZFBhc3MocmVuZGVyUGFzc09wdGlvbi5yZW5kZXJQYXNzKTtcbiAgICAgICAgdGhpcy5hZGRQYXNzKHRoaXMuYmxvb21QYXNzKTtcbiAgICAgICAgdGhpcy5vbkJlZm9yZVJlbmRlciA9IHRoaXMuc3dpdGNoZXIuZGFya2VuTm9uQmxvb21lZDtcbiAgICAgICAgdGhpcy5vbkFmdGVyUmVuZGVyID0gdGhpcy5zd2l0Y2hlci5yZXN0b3JlTWF0ZXJpYWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaPj+eUu+e1kOaenOOCkuWPjeaYoOOBl+OBn+ODhuOCr+OCueODgeODo+OCkuWPluW+l+OBmeOCi+OAglxuICAgICAqL1xuICAgIGdldCByZXN1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclRhcmdldDIudGV4dHVyZTtcbiAgICB9XG59XG5CbG9vbUVmZmVjdENvbXBvc2VyLkVOVElSRSA9IDA7XG5CbG9vbUVmZmVjdENvbXBvc2VyLkJMT09NID0gMzA7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9CbG9vbUVmZmVjdENvbXBvc2VyXCI7XG4iLCJpbXBvcnQgKiBhcyBGWEFBU2hhZGVyTW9kdWxlIGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vc2hhZGVycy9GWEFBU2hhZGVyXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlclBhc3MgfSBmcm9tIFwiLi4vcG9zdHByb2Nlc3NcIjtcbi8qKlxuICogRlhBQVNoYWRlcuOCkue1hOOBv+i+vOOBv+a4iOOBv+OBrlNoYWRlclBhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIEZYQUFTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICAvKipcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoRlhBQVNoYWRlck1vZHVsZVtcIkZYQUFTaGFkZXJcIl0pO1xuICAgIH1cbiAgICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgc3VwZXIuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zO1xuICAgICAgICB1bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlLnggPSAxIC8gd2lkdGg7XG4gICAgICAgIHVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUueSA9IDEgLyBoZWlnaHQ7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vRlhBQVNoYWRlclBhc3NcIjtcbiIsImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICAvL2xhbmd1YWdlPUdMU0xcbiAgICByZXR1cm4gYFxudW5pZm9ybSBzYW1wbGVyMkQgdERpZmZ1c2U7XG52YXJ5aW5nIHZlYzIgdlV2O1xuXG51bmlmb3JtIGZsb2F0IHN0cmVuZ3RoWDtcbnVuaWZvcm0gZmxvYXQgc3RyZW5ndGhZO1xudW5pZm9ybSBib29sIGhhc01hcDtcbnVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcbnVuaWZvcm0gdmVjMiBhc3BlY3Q7XG5cbnZvaWQgbWFpbigpIHtcbiAgdmVjMiB1diA9IHZVdjtcbiAgaWYoIGhhc01hcCApe1xuICAgIHZlYzIgZml4ZWRVViA9IHZVdiAtIDAuNTtcbiAgICBmaXhlZFVWICo9IGFzcGVjdDtcbiAgICBmaXhlZFVWICs9IDAuNTtcbiAgICBcbiAgICB2ZWM0IGRpc3BsYWNlbWVudCA9IHRleHR1cmUyRCggbWFwLCBmaXhlZFVWICk7XG4gICAgdXYgKz0gIGRpc3BsYWNlbWVudC5yZyAqIHZlYzIgKHN0cmVuZ3RoWCwgc3RyZW5ndGhZKTtcbiB9XG5cbiAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCggdERpZmZ1c2UsIHV2ICk7XG4gIGdsX0ZyYWdDb2xvciA9IGNvbG9yO1xufVxuICBgO1xufTtcbiIsImltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vRGlzcGxhY2VtZW50TWFwLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIERpc3BsYWNlbWVudE1hcFNoYWRlciBleHRlbmRzIFBvc3RQcm9jZXNzU2hhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IEZyYWdtZW50U2hhZGVyKCk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtKCkge1xuICAgICAgICBzdXBlci5pbml0VW5pZm9ybSgpO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmVuZ3RoWDogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgc3RyZW5ndGhZOiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICBtYXA6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgICAgICBoYXNNYXA6IHsgdmFsdWU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgYXNwZWN0OiB7IHZhbHVlOiBuZXcgVmVjdG9yMigxLjAsIDEuMCkgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEaXNwbGFjZW1lbnRNYXBTaGFkZXIgfSBmcm9tIFwiLi9EaXNwbGFjZW1lbnRNYXBTaGFkZXJcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IHsgVGV4dHVyZUxvYWRlciB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiBEaXNwbGFjZW1lbnRNYXDjgavjgojjgaPjgabnlLvpnaLjgpLmrarjgb7jgZvjgotTaGFkZXJQYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBEaXNwbGFjZW1lbnRNYXBTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IERpc3BsYWNlbWVudE1hcFNoYWRlcigpKTtcbiAgICB9XG4gICAgZ2V0IG1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubWFwLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwbGFjZW1lbnRNYXDjgpLoqq3jgb/ovrzjgoDjgIJcbiAgICAgKiDoqq3jgb/ovrzjgb/lvozjgavjgqLjgrnjg5rjgq/jg4jmr5Tjga7oo5zmraPjgpLooYzjgYbjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmxcbiAgICAgKi9cbiAgICBsb2FkTWFwKHVybCkge1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmVMb2FkZXIoKS5sb2FkKHVybCwgdGV4dHVyZSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hcFNpemVXID0gdGV4dHVyZS5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMubWFwU2l6ZUggPSB0ZXh0dXJlLmltYWdlLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQXNwZWN0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm1hcC52YWx1ZSA9IHRleHR1cmU7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaGFzTWFwLnZhbHVlID0gdGV4dHVyZSAhPSBudWxsO1xuICAgIH1cbiAgICBnZXQgc3RyZW5ndGhYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zdHJlbmd0aFgudmFsdWU7XG4gICAgfVxuICAgIHNldCBzdHJlbmd0aFgodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zdHJlbmd0aFgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHN0cmVuZ3RoWSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc3RyZW5ndGhZLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc3RyZW5ndGhZKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc3RyZW5ndGhZLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyU2l6ZVcgPSB3aWR0aDtcbiAgICAgICAgdGhpcy5yZW5kZXJlclNpemVIID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLnVwZGF0ZUFzcGVjdCgpO1xuICAgIH1cbiAgICB1cGRhdGVBc3BlY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcFNpemVXID09IG51bGwgfHwgdGhpcy5yZW5kZXJlclNpemVXID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW5kZXJlckFzcGVjdCA9IHRoaXMucmVuZGVyZXJTaXplVyAvIHRoaXMucmVuZGVyZXJTaXplSDtcbiAgICAgICAgY29uc3QgbWFwQXNwZWN0ID0gdGhpcy5tYXBTaXplVyAvIHRoaXMubWFwU2l6ZUg7XG4gICAgICAgIGlmIChyZW5kZXJlckFzcGVjdCA+IG1hcEFzcGVjdCkge1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5hc3BlY3QudmFsdWUgPSBuZXcgVmVjdG9yMigxLjAsIG1hcEFzcGVjdCAvIHJlbmRlcmVyQXNwZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMuYXNwZWN0LnZhbHVlID0gbmV3IFZlY3RvcjIocmVuZGVyZXJBc3BlY3QgLyBtYXBBc3BlY3QsIDEuMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9EaXNwbGFjZW1lbnRNYXBTaGFkZXJQYXNzXCI7XG4iLCJpbXBvcnQgeyBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL0NvbG9yRmlsdGVyLmZyYWcuZ2xzbFwiO1xuZXhwb3J0IGNsYXNzIENvbG9yRmlsdGVyU2hhZGVyIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gRnJhZ21lbnRTaGFkZXIoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm0oKSB7XG4gICAgICAgIHN1cGVyLmluaXRVbmlmb3JtKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaDogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgbXVsdGlTOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBtdWx0aUI6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIGFkZFM6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgICAgIGFkZEI6IHsgdmFsdWU6IDAuMCB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbG9yRmlsdGVyU2hhZGVyIH0gZnJvbSBcIi4vQ29sb3JGaWx0ZXJTaGFkZXJcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB9IGZyb20gXCIuLi9pbmRleFwiO1xuLyoqXG4gKiBoc2LlgKTjgpLjgqrjg5Xjgrvjg4Pjg4jjgZfjgabjgIHoibLjgpLlpInljJbjgZXjgZvjgovjgrfjgqfjg7zjg4Djg7zjg5HjgrlcbiAqXG4gKiDkvosgKVxuICogbXVsdGlTID0gMC4wLCBhZGRCID0gMS4w44Gr44GZ44KL44Go55m944Gr6aO95ZKM44GZ44KL44CCXG4gKiBtdWx0aUIgPSAwLjAsIOOCguOBl+OBj+OBr2FkZEIgPSAtMS4wIOOBp+ODluODqeODg+OCr+OCouOCpuODiOOAglxuICovXG5leHBvcnQgY2xhc3MgQ29sb3JGaWx0ZXJTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICBnZXQgaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGgodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5oLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBtdWx0aVMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm11bHRpUy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IG11bHRpUyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm11bHRpUy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbXVsdGlCKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5tdWx0aUIudmFsdWU7XG4gICAgfVxuICAgIHNldCBtdWx0aUIodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tdWx0aUIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGFkZFMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmFkZFMudmFsdWU7XG4gICAgfVxuICAgIHNldCBhZGRTKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuYWRkUy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYWRkQigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuYWRkQi52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGFkZEIodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hZGRCLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihuZXcgQ29sb3JGaWx0ZXJTaGFkZXIoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vQ29sb3JGaWx0ZXJTaGFkZXJQYXNzXCI7XG4iLCJpbXBvcnQgeyBVbmlmb3Jtc1V0aWxzLCBDb2xvciB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXIgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9Nb25vdG9uZS5mcmFnLmdsc2xcIjtcbmV4cG9ydCBjbGFzcyBNb25vdG9uZVNoYWRlciBleHRlbmRzIFBvc3RQcm9jZXNzU2hhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IEZyYWdtZW50U2hhZGVyKCk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtKCkge1xuICAgICAgICBzdXBlci5pbml0VW5pZm9ybSgpO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmVuZ3RoOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBjb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDB4ZmZmZmZmKSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE1vbm90b25lU2hhZGVyIH0gZnJvbSBcIi4vTW9ub3RvbmVTaGFkZXJcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB9IGZyb20gXCIuLi9pbmRleFwiO1xuLyoqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgTW9ub3RvbmVTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICBnZXQgY29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmNvbG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgY29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5jb2xvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgc3RyZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnN0cmVuZ3RoLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc3RyZW5ndGgodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5zdHJlbmd0aC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IE1vbm90b25lU2hhZGVyKCkpO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL01vbm90b25lU2hhZGVyUGFzc1wiO1xuIiwiZXhwb3J0ICogZnJvbSBcIi4vcG9zdHByb2Nlc3MvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wZXJpcGhlcmFsTGlnaHQvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaHJvbWF0aWNBYmVycmF0aW9uL1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbWl4L1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYmxvb20vXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9meGFhL1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGlzcGxhY2VtZW50L1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29sb3JGaWx0ZXIvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tb25vdG9uZS9cIjtcbiIsImV4cG9ydCBjbGFzcyBDb21tb25HVUkge1xuICBzdGF0aWMgaW5pdEdVSVJlc29sdXRpb24oZ3VpLCBwb3N0UmVuZGVyZXIpIHtcbiAgICBjb25zdCBzaXplID0gcG9zdFJlbmRlcmVyLmdldFNpemUoKTtcbiAgICBjb25zdCBwcm9wID0ge1xuICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgIH07XG5cbiAgICBjb25zdCBvbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgIHBvc3RSZW5kZXJlci5zZXRTaXplKHByb3Aud2lkdGgsIHByb3AuaGVpZ2h0KTtcbiAgICB9O1xuICAgIGNvbnN0IGZvbGRlciA9IGd1aS5hZGRGb2xkZXIoXCJSZXNvbHV0aW9uXCIpO1xuICAgIGZvbGRlci5hZGQocHJvcCwgXCJ3aWR0aFwiLCAyLCAxOTIwKS5zdGVwKDEpLm9uQ2hhbmdlKG9uQ2hhbmdlKTtcbiAgICBmb2xkZXIuYWRkKHByb3AsIFwiaGVpZ2h0XCIsIDIsIDEwODApLnN0ZXAoMSkub25DaGFuZ2Uob25DaGFuZ2UpO1xuICAgIGZvbGRlci5vcGVuKCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdENvbG9yR1VJKGZvbGRlciwgdGFyZ2V0LCBwcm9wTmFtZSA9IFwiY29sb3JcIikge1xuICAgIGNvbnN0IHByb3AgPSB7fTtcbiAgICBjb25zdCB0YXJnZXRDb2xvciA9IHRhcmdldFtwcm9wTmFtZV07XG4gICAgcHJvcFtwcm9wTmFtZV0gPSB0YXJnZXRDb2xvci5nZXRIZXgoKTtcbiAgICBmb2xkZXIuYWRkQ29sb3IocHJvcCwgcHJvcE5hbWUpLm9uQ2hhbmdlKCh2YWwpID0+IHtcbiAgICAgIHRhcmdldENvbG9yLnNldEhleCh2YWwpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9wO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb2xvciwgRm9nLCBNZXNoLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBTcGhlcmVHZW9tZXRyeSB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgQ29tbW9uIH0gZnJvbSBcIi4vQ29tbW9uXCI7XG5pbXBvcnQgR1VJIGZyb20gXCJsaWwtZ3VpXCI7XG5pbXBvcnQgeyBEaXNwbGFjZW1lbnRNYXBTaGFkZXJQYXNzLCBQb3N0UHJvY2Vzc1JlbmRlcmVyIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBDb21tb25HVUkgfSBmcm9tIFwiLi9Db21tb25HVUlcIjtcbmltcG9ydCB7IFNNQUFQYXNzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9TTUFBUGFzc1wiO1xuaW1wb3J0IHsgUkFGVGlja2VyLCBSQUZUaWNrZXJFdmVudFR5cGUgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG5cbmNsYXNzIFN0dWR5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgVyA9IDY0MDtcbiAgICBjb25zdCBIID0gNDgwO1xuXG4gICAgY29uc3Qgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG4gICAgc2NlbmUuZm9nID0gbmV3IEZvZygweGZmZmZmZiwgODAsIDE2MCk7XG4gICAgQ29tbW9uLmluaXRMaWdodChzY2VuZSk7XG4gICAgY29uc3QgY2FtZXJhID0gQ29tbW9uLmluaXRDYW1lcmEoc2NlbmUsIFcsIEgpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gQ29tbW9uLmluaXRSZW5kZXJlcihXLCBIKTtcbiAgICBjb25zdCBjb250cm9sID0gQ29tbW9uLmluaXRDb250cm9sKGNhbWVyYSwgcmVuZGVyZXIpO1xuICAgIENvbW1vbi5pbml0SGVscGVyKHNjZW5lKTtcbiAgICB0aGlzLmluaXRPYmplY3Qoc2NlbmUpO1xuXG4gICAgdGhpcy5wb3N0UmVuZGVyZXIgPSBuZXcgUG9zdFByb2Nlc3NSZW5kZXJlcihzY2VuZSwgY2FtZXJhLCByZW5kZXJlcik7XG4gICAgY29uc3QgcGFzcyA9IG5ldyBEaXNwbGFjZW1lbnRNYXBTaGFkZXJQYXNzKCk7XG4gICAgcGFzcy5sb2FkTWFwKFwiLi90ZXh0dXJlL2NhdXN0XzAwMS5wbmdcIik7XG4gICAgLy8gcGFzcy5sb2FkTWFwKFwiLi90ZXh0dXJlL3V2X2dyaWRfaC5qcGdcIik7XG4gICAgLy8gcGFzcy5sb2FkTWFwKFwiLi90ZXh0dXJlL3V2X2dyaWRfdy5qcGdcIik7XG5cbiAgICBjb25zdCBhYSA9IG5ldyBTTUFBUGFzcygpO1xuICAgIHRoaXMucG9zdFJlbmRlcmVyLmFkZENvbXBvc2VyKFtwYXNzLCBhYV0pO1xuXG4gICAgUkFGVGlja2VyLm9uKFJBRlRpY2tlckV2ZW50VHlwZS50aWNrLCB0aGlzLnBvc3RSZW5kZXJlci5yZW5kZXIpO1xuXG4gICAgdGhpcy5pbml0R1VJKHBhc3MpO1xuICB9XG5cbiAgaW5pdE9iamVjdChzY2VuZSkge1xuICAgIGNvbnN0IGdlbyA9IG5ldyBTcGhlcmVHZW9tZXRyeSgxMCwgMTYsIDE2KTtcbiAgICBjb25zdCBtYXQgPSBuZXcgTWVzaExhbWJlcnRNYXRlcmlhbCh7XG4gICAgICBmb2c6IHNjZW5lLmZvZyAhPT0gdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIG1hdC5jb2xvciA9IG5ldyBDb2xvcigweGZmNjY2Nik7XG4gICAgLy8gbWF0LndpcmVmcmFtZSA9IHRydWU7XG4gICAgY29uc3QgY2VudGVyID0gbmV3IE1lc2goZ2VvLCBtYXQpO1xuICAgIHNjZW5lLmFkZChjZW50ZXIpO1xuXG4gICAgY29uc3Qgc2F0ZWxsaXRlID0gbmV3IE1lc2goZ2VvLCBtYXQuY2xvbmUoKSk7XG4gICAgc2F0ZWxsaXRlLnBvc2l0aW9uLnNldCgzMCwgMCwgMCk7XG4gICAgc2NlbmUuYWRkKHNhdGVsbGl0ZSk7XG5cbiAgICBjb25zdCBzYXRlbGxpdGUwMiA9IG5ldyBNZXNoKGdlbywgbWF0KTtcbiAgICBzYXRlbGxpdGUwMi5wb3NpdGlvbi5zZXQoLTMwLCAwLCAwKTtcbiAgICBzY2VuZS5hZGQoc2F0ZWxsaXRlMDIpO1xuICB9XG5cbiAgaW5pdEdVSShwYXNzKSB7XG4gICAgY29uc3QgZ3VpID0gbmV3IEdVSSgpO1xuICAgIHRoaXMuaW5pdEdVSUVmZmVjdChndWksIHBhc3MpO1xuICAgIENvbW1vbkdVSS5pbml0R1VJUmVzb2x1dGlvbihndWksIHRoaXMucG9zdFJlbmRlcmVyKTtcbiAgfVxuXG4gIGluaXRHVUlFZmZlY3QoZ3VpLCBwYXNzKSB7XG4gICAgY29uc3QgcHJvcCA9IHtcbiAgICAgIC8vIGNvbG9yOiBwYXNzLmNvbG9yLmdldEhleCgpXG4gICAgfTtcbiAgICBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKFwiRGlzcGxhY2VtZW50IG1hcFwiKTtcbiAgICBmb2xkZXIuYWRkKHBhc3MsIFwic3RyZW5ndGhYXCIsIC0xLjAsIDEuMCkuc3RlcCgwLjAxKTtcbiAgICBmb2xkZXIuYWRkKHBhc3MsIFwic3RyZW5ndGhZXCIsIC0xLjAsIDEuMCkuc3RlcCgwLjAxKTtcbiAgICAvLyBmb2xkZXIuYWRkKHBhc3MsIFwicmFkaXVzSW5uZXJcIiwgMC4wLCAzLjApO1xuICAgIC8vIGZvbGRlci5hZGQocGFzcywgXCJyYWRpdXNPdXRlclwiLCAwLjAsIDMuMCk7XG4gICAgLy8gZm9sZGVyLmFkZENvbG9yKHByb3AsIFwiY29sb3JcIikub25DaGFuZ2UodmFsID0+IHtcbiAgICAvLyAgIHBhc3MuY29sb3Iuc2V0SGV4KHZhbCk7XG4gICAgLy8gfSk7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBjb25zdCBzdHVkeSA9IG5ldyBTdHVkeSgpO1xufTtcbiJdLCJuYW1lcyI6WyJBbWJpZW50TGlnaHQiLCJBeGVzSGVscGVyIiwiQ29sb3IiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIlNjZW5lIiwiV2ViR0xSZW5kZXJlciIsIk9yYml0Q29udHJvbHMiLCJDb21tb24iLCJpbml0U2NlbmUiLCJzY2VuZSIsImluaXRMaWdodCIsImFtYmllbnRMaWdodCIsImFkZCIsImluaXRDYW1lcmEiLCJXIiwiSCIsIm5lYXIiLCJmYXIiLCJjYW1lcmEiLCJwb3NpdGlvbiIsInNldCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaW5pdENvbnRyb2wiLCJyZW5kZXIiLCJkb21FbGVtZW50IiwiY29udHJvbCIsInVwZGF0ZSIsImluaXRSZW5kZXJlciIsIm9wdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsImNvbG9yIiwiaWQiLCJhbnRpYWxpYXMiLCJyZW5kZXJlciIsImNhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsInNldFBpeGVsUmF0aW8iLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwiaW5pdEhlbHBlciIsImF4ZXNIZWxwZXIiLCJFZmZlY3RDb21wb3NlciIsIlBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImVuYWJsZWQiLCJWZWN0b3IyIiwiUmVuZGVyUGFzcyIsIlJBRlRpY2tlckV2ZW50IiwiUG9zdFByb2Nlc3NSZW5kZXJlciIsIl9jb21wb3NlcnMiLCJhcmciLCJkZWx0YSIsImZvckVhY2giLCJjb21wb3NlciIsIm9uQmVmb3JlUmVuZGVyIiwib25BZnRlclJlbmRlciIsImNvbXBvc2VycyIsImFkZENvbXBvc2VyIiwicGFzc2VzIiwicmVuZGVyUGFzcyIsImdldENvbXBvc2VyIiwicHVzaCIsInJlbmRlclBhc3NPcHRpb24iLCJSZW5kZXJQYXNzT3B0aW9uIiwiaW5pdCIsImFkZFBhc3MiLCJwIiwidyIsImgiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiZ2V0U2l6ZSIsIlBvc3RQcm9jZXNzU2hhZGVyIiwidmVydGV4U2hhZGVyIiwiaW5pdFVuaWZvcm0iLCJ1bmlmb3JtcyIsInREaWZmdXNlIiwidmFsdWUiLCJTaGFkZXJQYXNzIiwiUG9zdFByb2Nlc3NTaGFkZXJQYXNzIiwiVW5pZm9ybXNVdGlscyIsIkZyYWdtZW50U2hhZGVyIiwiUGVyaXBoZXJhbExpZ2h0U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJtZXJnZSIsInJhdGUiLCJyYWRpdXNJbm5lciIsInJhZGl1c091dGVyIiwiTWF0aCIsInNxcnQiLCJQZXJpcGhlcmFsTGlnaHRTaGFkZXJQYXNzIiwiQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlciIsIkNocm9tYXRpY0FiZXJyYXRpb25TaGFkZXJQYXNzIiwiTWl4U2hhZGVyIiwibWl4VGV4dHVyZSIsIk1peFNoYWRlclBhc3MiLCJNYXRlcmlhbFN0b3JhZ2UiLCJ1cGRhdGVNYXRlcmlhbCIsIm9yaWdpbmFsIiwiY29weU1hdGVyaWFsQXJyYXkiLCJkYXJrZW5NYXRlcmlhbEFycmF5IiwiZGFyayIsImlzQ2xvbmUiLCJjbG9uZVRvRGFyayIsImNvcHlUb0RhcmsiLCJkYXJrZW5IZWFkIiwiZ2V0SGVhZE1hdGVyaWFsIiwib3JpZ2luYWxIZWFkIiwidHlwZSIsIm1hdCIsImlzQXJyYXkiLCJBcnJheSIsImlzQXJyYXlPcmlnaW5hbCIsImRyayIsImluZGV4IiwiY29weSIsIm1hcCIsInZhbCIsImNsb25lIiwibWF0ZXJpYWwiLCJkYXJrZW5NYXRlcmlhbCIsInNldEhleCIsIkxheWVycyIsIkJsb29tRWZmZWN0Q29tcG9zZXIiLCJNYXRlcmlhbFN3aXRjaGVyIiwiZGFya2VuTm9uQmxvb21lZCIsInRyYXZlcnNlVmlzaWJsZSIsInN3aXRjaFRvRGFya2VuIiwicmVzdG9yZU1hdGVyaWFsIiwic3dpdGNoVG9PcmlnaW5hbE1hdGVyaWFsIiwib2JqIiwiaXNEYXJrZW4iLCJ1c2VyRGF0YSIsIm1hdGVyaWFsU3RvcmFnZSIsInN0b3JhZ2UiLCJtZXNoIiwibGF5ZXJzIiwiQkxPT00iLCJpc01lc2giLCJpc0xpbmUiLCJ0ZXN0IiwiVW5yZWFsQmxvb21QYXNzIiwic3dpdGNoZXIiLCJzaXplIiwiYmxvb21QYXNzIiwicmVuZGVyVG9TY3JlZW4iLCJyZXN1bHQiLCJyZW5kZXJUYXJnZXQyIiwidGV4dHVyZSIsIkVOVElSRSIsIkZYQUFTaGFkZXJNb2R1bGUiLCJGWEFBU2hhZGVyUGFzcyIsIndpZHRoIiwiaGVpZ2h0IiwicmVzb2x1dGlvbiIsIngiLCJ5IiwiRGlzcGxhY2VtZW50TWFwU2hhZGVyIiwic3RyZW5ndGhYIiwic3RyZW5ndGhZIiwiaGFzTWFwIiwiVGV4dHVyZUxvYWRlciIsIkRpc3BsYWNlbWVudE1hcFNoYWRlclBhc3MiLCJsb2FkTWFwIiwidXJsIiwibG9hZCIsIm1hcFNpemVXIiwiaW1hZ2UiLCJtYXBTaXplSCIsInVwZGF0ZUFzcGVjdCIsInJlbmRlcmVyU2l6ZVciLCJyZW5kZXJlclNpemVIIiwicmVuZGVyZXJBc3BlY3QiLCJtYXBBc3BlY3QiLCJDb2xvckZpbHRlclNoYWRlciIsIm11bHRpUyIsIm11bHRpQiIsImFkZFMiLCJhZGRCIiwiQ29sb3JGaWx0ZXJTaGFkZXJQYXNzIiwiTW9ub3RvbmVTaGFkZXIiLCJzdHJlbmd0aCIsIk1vbm90b25lU2hhZGVyUGFzcyIsIkNvbW1vbkdVSSIsImluaXRHVUlSZXNvbHV0aW9uIiwiZ3VpIiwicG9zdFJlbmRlcmVyIiwicHJvcCIsIm9uQ2hhbmdlIiwiZm9sZGVyIiwiYWRkRm9sZGVyIiwic3RlcCIsIm9wZW4iLCJpbml0Q29sb3JHVUkiLCJ0YXJnZXQiLCJwcm9wTmFtZSIsInRhcmdldENvbG9yIiwiZ2V0SGV4IiwiYWRkQ29sb3IiLCJGb2ciLCJNZXNoIiwiTWVzaExhbWJlcnRNYXRlcmlhbCIsIlNwaGVyZUdlb21ldHJ5IiwiR1VJIiwiU01BQVBhc3MiLCJSQUZUaWNrZXIiLCJSQUZUaWNrZXJFdmVudFR5cGUiLCJTdHVkeSIsImZvZyIsImluaXRPYmplY3QiLCJwYXNzIiwiYWEiLCJvbiIsInRpY2siLCJpbml0R1VJIiwiZ2VvIiwidW5kZWZpbmVkIiwiY2VudGVyIiwic2F0ZWxsaXRlIiwic2F0ZWxsaXRlMDIiLCJpbml0R1VJRWZmZWN0Iiwib25sb2FkIiwic3R1ZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///673\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],I=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(C--,1);var c=F();void 0!==c&&(Q=c)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=917,(()=>{var Q={917:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,g,c]=F,C=0;if(I.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(c)var n=c(__webpack_require__)}for(U&&U(F);C<I.length;C++)s=I[C],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(n)},F=self.webpackChunkthreejs_postprocess=self.webpackChunkthreejs_postprocess||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(673)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();