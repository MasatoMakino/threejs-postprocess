(()=>{"use strict";var __webpack_modules__={849:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: StudyBloom\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module/* Scene */.xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      id: "webgl-canvas",\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      canvas: document.getElementById(option.id),\n      antialias: option.antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(30);\n    scene.add(axesHelper);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/RenderPass.js\nvar RenderPass = __webpack_require__(42);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/EffectComposer.js + 1 modules\nvar EffectComposer = __webpack_require__(438);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessEffectComposer.js\n\n/**\n * レンダリングの前後に任意の処理を実行する機能を追加したEffectComposer.\n */\nclass PostProcessEffectComposer extends EffectComposer/* EffectComposer */.x {\n  constructor() {\n    super(...arguments);\n    this.enabled = true;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessRenderer.js\n\n\n\n\n/**\n * 複数のエフェクトコンポーザーと、WebGLRendererを管理し、\n * 連続してポストエフェクト処理を行うためのクラス。\n */\nclass PostProcessRenderer {\n  get composers() {\n    return this._composers;\n  }\n  constructor(scene, camera, renderer) {\n    this._composers = [];\n    this.render = arg => {\n      let delta;\n      if (arg instanceof esm/* RAFTickerEventContext */.S) {\n        delta = arg.delta;\n      } else {\n        delta = arg;\n      }\n      this._composers.forEach(composer => {\n        if (!composer.enabled) return;\n        if (composer.onBeforeRender) composer.onBeforeRender(delta);\n        composer.render(delta);\n        if (composer.onAfterRender) composer.onAfterRender(delta);\n      });\n    };\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n  }\n  /**\n   * シェーダーパスを挟んだEffectComposerを生成、登録する。\n   * @param passes\n   * @param renderPass\n   */\n  addComposer(passes, renderPass) {\n    const composer = PostProcessRenderer.getComposer(passes, this.renderer, {\n      scene: this.scene,\n      camera: this.camera,\n      renderPass: renderPass\n    });\n    this._composers.push(composer);\n    return composer;\n  }\n  /**\n   * コンポーザーを生成する。\n   * @param passes\n   * @param renderer\n   * @param renderPassOption\n   */\n  static getComposer(passes, renderer, renderPassOption) {\n    RenderPassOption.init(renderPassOption);\n    const composer = new PostProcessEffectComposer(renderer);\n    composer.addPass(renderPassOption.renderPass);\n    passes.forEach(p => {\n      composer.addPass(p);\n    });\n    return composer;\n  }\n  /**\n   * ウィンドウリサイズ時の処理\n   * @param w\n   * @param h\n   */\n  setSize(w, h) {\n    this.camera.aspect = w / h;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(w, h);\n    this._composers.forEach(composer => {\n      composer.setSize(w, h);\n    });\n  }\n  /**\n   * WebGLRendererのレンダリングサイズを取得する。\n   */\n  getSize() {\n    return this.renderer.getSize(new three_module/* Vector2 */.FM8());\n  }\n}\n/**\n * getComposer関数で利用するRenderPass初期化オプション\n *\n * sceneとcameraのセット、もしくはrenderPassインスタンスを代入する必要がある。\n * sceneとcameraのセットの場合 : RenderPassインスタンスを生成する。\n * renderPassインスタンスの場合 : そのままrenderPassインスタンスを利用する。\n */\nclass RenderPassOption {\n  static init(option) {\n    if (option.renderPass == null) {\n      option.renderPass = new RenderPass/* RenderPass */.C(option.scene, option.camera);\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\nvar ShaderPass = __webpack_require__(571);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessShaderPass.js\n\nclass PostProcessShaderPass_PostProcessShaderPass extends ShaderPass/* ShaderPass */.T {\n  get tDiffuse() {\n    return this.uniforms.tDiffuse.value;\n  }\n  set tDiffuse(value) {\n    this.uniforms.tDiffuse.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/postprocess/index.js\n\n\n\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShader.js\n\n\n\nclass PeripheralLightShader_PeripheralLightShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 5.0\n      },\n      radiusInner: {\n        value: 0.75\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      },\n      color: {\n        value: new Color(0, 0, 0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShaderPass.js\n\n\n/**\n * 周辺光量の減光を表現するフィルタ。\n */\nclass PeripheralLightShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  constructor() {\n    super(new PeripheralLightShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/index.js\n\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShader.js\n\n\n\nclass ChromaticAberrationShader_ChromaticAberrationShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 1.0\n      },\n      radiusInner: {\n        value: 0.25\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShaderPass.js\n\n\nclass ChromaticAberrationShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  constructor() {\n    super(new ChromaticAberrationShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/index.js\n\n;// CONCATENATED MODULE: ./esm/mix/MixShader.js\n\n\n\nclass MixShader_MixShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      mixTexture: {\n        value: null\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/MixShaderPass.js\n\n\n/**\n * 他のエフェクトコンポーザーの描画結果を受け取り、自身のレンダリング結果に乗算するShaderPass\n */\nclass MixShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get mixTexture() {\n    return this.uniforms.mixTexture.value;\n  }\n  set mixTexture(value) {\n    this.uniforms.mixTexture.value = value;\n  }\n  constructor(mixTexture) {\n    super(new MixShader());\n    this.mixTexture = mixTexture;\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/index.js\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js + 1 modules\nvar UnrealBloomPass = __webpack_require__(275);\n;// CONCATENATED MODULE: ./esm/bloom/MaterialStorage.js\n/**\n * Bloom設定に応じて、オリジナルのマテリアルを格納するためのオブジェクト。\n * Object3D.userData.materialStorageに格納される。\n */\nclass MaterialStorage {\n  updateMaterial(original) {\n    this.original = original;\n    this.copyMaterialArray();\n    this.darkenMaterialArray(this.dark);\n  }\n  copyMaterialArray() {\n    if (this.isClone()) {\n      this.cloneToDark();\n    } else {\n      this.copyToDark();\n    }\n  }\n  /**\n   * darkenマテリアルのコピーに、クローンを使用するかcopyを使用するかを判定する。\n   */\n  isClone() {\n    const darkenHead = this.getHeadMaterial(this.dark);\n    const originalHead = this.getHeadMaterial(this.original);\n    if (darkenHead == null || darkenHead.type !== originalHead.type) {\n      return true;\n    }\n    return false;\n  }\n  getHeadMaterial(mat) {\n    const isArray = Array.isArray(mat);\n    if (isArray) return mat[0];\n    return mat;\n  }\n  copyToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark.forEach((drk, index) => {\n        drk.copy(this.original[index]);\n      });\n    } else {\n      this.dark.copy(this.original);\n    }\n  }\n  cloneToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark = this.original.map(val => {\n        return val.clone();\n      });\n    } else {\n      this.dark = this.original.clone();\n    }\n  }\n  darkenMaterialArray(material) {\n    if (!Array.isArray(material)) {\n      MaterialStorage.darkenMaterial(material);\n      return;\n    }\n    material.forEach(mat => {\n      MaterialStorage.darkenMaterial(mat);\n    });\n  }\n  /**\n   * マテリアルを反射光のない黒に書き換える。\n   * @param material\n   */\n  static darkenMaterial(material) {\n    if (material["color"] != null) {\n      material["color"].setHex(0);\n    }\n    if (material["shininess"] != null) {\n      material["shininess"] = 0;\n    }\n    if (material["specular"] != null) {\n      material["specular"].setHex(0);\n    }\n    if (material["emissive"] != null) {\n      material["emissive"].setHex(0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/MaterialSwitcher.js\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassにおいて、マテリアルの切り替え処理を担当するクラス。\n */\nclass MaterialSwitcher {\n  constructor(scene) {\n    this.darkenNonBloomed = () => {\n      this.scene.traverseVisible(this.switchToDarken);\n    };\n    this.restoreMaterial = () => {\n      this.scene.traverseVisible(this.switchToOriginalMaterial);\n    };\n    /**\n     * scene上の各オブジェクトに対して、マテリアルの切り替えを行う。\n     * bloom対象外であれば#000のマテリアルに。\n     *\n     * @param obj sceneをtraverseして取得したオブジェクト。\n     */\n    this.switchToDarken = obj => {\n      if (!this.isDarken(obj)) return;\n      if (obj.userData.materialStorage == null) {\n        obj.userData.materialStorage = new MaterialStorage();\n      }\n      const storage = obj.userData.materialStorage;\n      const mesh = obj;\n      storage.updateMaterial(mesh.material);\n      mesh.material = storage.dark;\n    };\n    /**\n     * マテリアルストレージに格納されたオリジナルのマテリアル設定に復帰する。\n     * @param obj\n     */\n    this.switchToOriginalMaterial = obj => {\n      if (!this.isDarken(obj)) return;\n      const mesh = obj;\n      mesh.material = obj.userData.materialStorage.original;\n    };\n    this.scene = scene;\n    this.layers = new three_module/* Layers */.S9g();\n    this.layers.set(BloomEffectComposer.BLOOM);\n  }\n  /**\n   * そのオブジェクトがbloomマスクの対象か否かを判定する。\n   * @param obj\n   */\n  isDarken(obj) {\n    if (obj.isMesh == null && obj.isLine == null) return false;\n    return !this.layers.test(obj.layers);\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/BloomEffectComposer.js\n\n\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassを内包したEffectComposer.\n * BloomEffectComposer.BLOOMレイヤーに含まれるオブジェクトのみをBloomさせる.\n */\nclass BloomEffectComposer extends PostProcessEffectComposer {\n  constructor(scene, renderer, renderPassOption) {\n    super(renderer);\n    this.switcher = new MaterialSwitcher(scene);\n    const size = renderer.getSize(new three_module/* Vector2 */.FM8());\n    this.bloomPass = new UnrealBloomPass/* UnrealBloomPass */.m(size, 1.5, 0.4, 0.4);\n    // TODO : PR d.ts\n    // @ts-ignore\n    this.renderToScreen = false;\n    RenderPassOption.init(renderPassOption);\n    this.addPass(renderPassOption.renderPass);\n    this.addPass(this.bloomPass);\n    this.onBeforeRender = this.switcher.darkenNonBloomed;\n    this.onAfterRender = this.switcher.restoreMaterial;\n  }\n  /**\n   * 描画結果を反映したテクスチャを取得する。\n   */\n  get result() {\n    return this.renderTarget2.texture;\n  }\n}\nBloomEffectComposer.ENTIRE = 0;\nBloomEffectComposer.BLOOM = 30;\n;// CONCATENATED MODULE: ./esm/bloom/index.js\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/shaders/FXAAShader.js\nvar FXAAShader = __webpack_require__(993);\n;// CONCATENATED MODULE: ./esm/fxaa/FXAAShaderPass.js\n\n\n/**\n * FXAAShaderを組み込み済みのShaderPass\n */\nclass FXAAShaderPass extends PostProcessShaderPass_PostProcessShaderPass {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super(FXAAShader/* FXAAShader */.C);\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    const uniforms = this.material.uniforms;\n    uniforms.resolution.value.x = 1 / width;\n    uniforms.resolution.value.y = 1 / height;\n  }\n}\n;// CONCATENATED MODULE: ./esm/fxaa/index.js\n\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShader.js\n\n\n\n\nclass DisplacementMapShader_DisplacementMapShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      strengthX: {\n        value: 0.0\n      },\n      strengthY: {\n        value: 0.0\n      },\n      map: {\n        value: null\n      },\n      hasMap: {\n        value: false\n      },\n      aspect: {\n        value: new Vector2(1.0, 1.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShaderPass.js\n\n\n\n\n/**\n * DisplacementMapによって画面を歪ませるShaderPass\n */\nclass DisplacementMapShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get map() {\n    return this.uniforms.map.value;\n  }\n  /**\n   * DisplacementMapを読み込む。\n   * 読み込み後にアスペクト比の補正を行う。\n   *\n   * @param url\n   */\n  loadMap(url) {\n    const texture = new TextureLoader().load(url, texture => {\n      this.mapSizeW = texture.image.width;\n      this.mapSizeH = texture.image.height;\n      this.updateAspect();\n    });\n    this.uniforms.map.value = texture;\n    this.uniforms.hasMap.value = texture != null;\n  }\n  get strengthX() {\n    return this.uniforms.strengthX.value;\n  }\n  set strengthX(value) {\n    this.uniforms.strengthX.value = value;\n  }\n  get strengthY() {\n    return this.uniforms.strengthY.value;\n  }\n  set strengthY(value) {\n    this.uniforms.strengthY.value = value;\n  }\n  constructor() {\n    super(new DisplacementMapShader());\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    this.rendererSizeW = width;\n    this.rendererSizeH = height;\n    this.updateAspect();\n  }\n  updateAspect() {\n    if (this.mapSizeW == null || this.rendererSizeW == null) {\n      return;\n    }\n    const rendererAspect = this.rendererSizeW / this.rendererSizeH;\n    const mapAspect = this.mapSizeW / this.mapSizeH;\n    if (rendererAspect > mapAspect) {\n      this.uniforms.aspect.value = new Vector2(1.0, mapAspect / rendererAspect);\n    } else {\n      this.uniforms.aspect.value = new Vector2(rendererAspect / mapAspect, 1.0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/index.js\n\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShader.js\n\n\n\nclass ColorFilterShader_ColorFilterShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      h: {\n        value: 0.0\n      },\n      multiS: {\n        value: 1.0\n      },\n      multiB: {\n        value: 1.0\n      },\n      addS: {\n        value: 0.0\n      },\n      addB: {\n        value: 0.0\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShaderPass.js\n\n\n/**\n * hsb値をオフセットして、色を変化させるシェーダーパス\n *\n * 例 )\n * multiS = 0.0, addB = 1.0にすると白に飽和する。\n * multiB = 0.0, もしくはaddB = -1.0 でブラックアウト。\n */\nclass ColorFilterShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get h() {\n    return this.uniforms.h.value;\n  }\n  set h(value) {\n    this.uniforms.h.value = value;\n  }\n  get multiS() {\n    return this.uniforms.multiS.value;\n  }\n  set multiS(value) {\n    this.uniforms.multiS.value = value;\n  }\n  get multiB() {\n    return this.uniforms.multiB.value;\n  }\n  set multiB(value) {\n    this.uniforms.multiB.value = value;\n  }\n  get addS() {\n    return this.uniforms.addS.value;\n  }\n  set addS(value) {\n    this.uniforms.addS.value = value;\n  }\n  get addB() {\n    return this.uniforms.addB.value;\n  }\n  set addB(value) {\n    this.uniforms.addB.value = value;\n  }\n  constructor() {\n    super(new ColorFilterShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/index.js\n\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShader.js\n\n\n\nclass MonotoneShader_MonotoneShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      strength: {\n        value: 1.0\n      },\n      color: {\n        value: new Color(0xffffff)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShaderPass.js\n\n\n/**\n *\n */\nclass MonotoneShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  constructor() {\n    super(new MonotoneShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/index.js\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(899);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/SMAAPass.js\nvar SMAAPass = __webpack_require__(998);\n;// CONCATENATED MODULE: ./demoSrc/CommonGUI.js\nclass CommonGUI {\n  static initGUIResolution(gui, postRenderer) {\n    const size = postRenderer.getSize();\n    const prop = {\n      width: size.width,\n      height: size.height\n    };\n    const onChange = () => {\n      postRenderer.setSize(prop.width, prop.height);\n    };\n    const folder = gui.addFolder("Resolution");\n    folder.add(prop, "width", 2, 1920).step(1).onChange(onChange);\n    folder.add(prop, "height", 2, 1080).step(1).onChange(onChange);\n    folder.open();\n  }\n  static initColorGUI(folder, target, propName = "color") {\n    const prop = {};\n    const targetColor = target[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n}\n;// CONCATENATED MODULE: ./demoSrc/demoAA.js\n\n\n\n\n\n\n\nclass StudyBloom {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      antialias: false\n    });\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    this.initObject(scene);\n    this.postRenderer = new PostProcessRenderer(scene, camera, renderer);\n    const size = renderer.getSize(new three_module/* Vector2 */.FM8());\n    //TODO : PR d.ts. SMAAPass(w,h) is optional.\n    this.smaaPass = new SMAAPass/* SMAAPass */.d(size.width, size.height);\n    this.fxaaPass = new FXAAShaderPass();\n    this.postRenderer.addComposer([this.fxaaPass, this.smaaPass]);\n    esm/* RAFTicker.on */.F.on("tick", this.postRenderer.render);\n    this.initGUI();\n  }\n  initObject(scene) {\n    const spot = new three_module/* PointLight */.cek(0xffffff, 3, 0, 2);\n    spot.position.set(0, 0, 0);\n    scene.add(spot);\n    const helper = new three_module/* PointLightHelper */.xG9(spot, 2, 0);\n    scene.add(helper);\n    const geo = new three_module/* SphereGeometry */.xo$(10, 32, 32);\n    const mat = new three_module/* MeshLambertMaterial */.YBo({\n      fog: scene.fog !== undefined,\n      wireframe: true,\n      color: new three_module/* Color */.Ilk(0xffffff)\n    });\n    this.center = new three_module/* Mesh */.Kj0(geo, mat);\n    this.center.layers.enable(BloomEffectComposer.BLOOM);\n    scene.add(this.center);\n  }\n  initGUI() {\n    const gui = new lil_gui_esm/* default */.ZP();\n    this.initPassGUI(gui);\n    CommonGUI.initGUIResolution(gui, this.postRenderer);\n  }\n  initPassGUI(gui) {\n    const folder = gui.addFolder("Anti Aliasing");\n    const AntiAliasingType = {\n      None: 0,\n      SMAA: 1,\n      FXAA: 2\n    };\n    const prop = {\n      AA_Type: AntiAliasingType.None\n    };\n    const onChanged = val => {\n      this.smaaPass.enabled = val == AntiAliasingType.SMAA;\n      this.fxaaPass.enabled = val == AntiAliasingType.FXAA;\n    };\n    folder.add(prop, "AA_Type", {\n      None: AntiAliasingType.None,\n      FXAA: AntiAliasingType.FXAA,\n      SMAA: AntiAliasingType.SMAA\n    }).onChange(onChanged);\n    folder.open();\n    onChanged(prop.AA_Type);\n  }\n}\nwindow.onload = () => {\n  const study = new StudyBloom();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///849\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],I=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(C--,1);var c=F();void 0!==c&&(Q=c)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=888,(()=>{var Q={888:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,g,c]=F,C=0;if(I.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(c)var n=c(__webpack_require__)}for(U&&U(F);C<I.length;C++)s=I[C],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(n)},F=self.webpackChunkthreejs_postprocess=self.webpackChunkthreejs_postprocess||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(849)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();