(()=>{"use strict";var __webpack_modules__={849:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: StudyBloom\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module/* Scene */.xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      id: "webgl-canvas",\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      canvas: document.getElementById(option.id),\n      antialias: option.antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(30);\n    scene.add(axesHelper);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/RenderPass.js\nvar RenderPass = __webpack_require__(42);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/EffectComposer.js + 1 modules\nvar EffectComposer = __webpack_require__(438);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessEffectComposer.js\n\n/**\n * レンダリングの前後に任意の処理を実行する機能を追加したEffectComposer.\n */\nclass PostProcessEffectComposer extends EffectComposer/* EffectComposer */.x {\n  constructor() {\n    super(...arguments);\n    this.enabled = true;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessRenderer.js\n\n\n\n\n/**\n * 複数のエフェクトコンポーザーと、WebGLRendererを管理し、\n * 連続してポストエフェクト処理を行うためのクラス。\n */\nclass PostProcessRenderer {\n  get composers() {\n    return this._composers;\n  }\n  constructor(scene, camera, renderer) {\n    this._composers = [];\n    this.render = arg => {\n      let delta;\n      if (arg instanceof esm/* RAFTickerEventContext */.S) {\n        delta = arg.delta;\n      } else {\n        delta = arg;\n      }\n      this._composers.forEach(composer => {\n        if (!composer.enabled) return;\n        if (composer.onBeforeRender) composer.onBeforeRender(delta);\n        composer.render(delta);\n        if (composer.onAfterRender) composer.onAfterRender(delta);\n      });\n    };\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n  }\n  /**\n   * シェーダーパスを挟んだEffectComposerを生成、登録する。\n   * @param passes\n   * @param renderPass\n   */\n  addComposer(passes, renderPass) {\n    const composer = PostProcessRenderer.getComposer(passes, this.renderer, {\n      scene: this.scene,\n      camera: this.camera,\n      renderPass: renderPass\n    });\n    this._composers.push(composer);\n    return composer;\n  }\n  /**\n   * コンポーザーを生成する。\n   * @param passes\n   * @param renderer\n   * @param renderPassOption\n   */\n  static getComposer(passes, renderer, renderPassOption) {\n    RenderPassOption.init(renderPassOption);\n    const composer = new PostProcessEffectComposer(renderer);\n    composer.addPass(renderPassOption.renderPass);\n    passes.forEach(p => {\n      composer.addPass(p);\n    });\n    return composer;\n  }\n  /**\n   * ウィンドウリサイズ時の処理\n   * @param w\n   * @param h\n   */\n  setSize(w, h) {\n    this.camera.aspect = w / h;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(w, h);\n    this._composers.forEach(composer => {\n      composer.setSize(w, h);\n    });\n  }\n  /**\n   * WebGLRendererのレンダリングサイズを取得する。\n   */\n  getSize() {\n    return this.renderer.getSize(new three_module/* Vector2 */.FM8());\n  }\n}\n/**\n * getComposer関数で利用するRenderPass初期化オプション\n *\n * sceneとcameraのセット、もしくはrenderPassインスタンスを代入する必要がある。\n * sceneとcameraのセットの場合 : RenderPassインスタンスを生成する。\n * renderPassインスタンスの場合 : そのままrenderPassインスタンスを利用する。\n */\nclass RenderPassOption {\n  static init(option) {\n    if (option.renderPass == null) {\n      option.renderPass = new RenderPass/* RenderPass */.C(option.scene, option.camera);\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/ShaderPass.js\nvar ShaderPass = __webpack_require__(571);\n;// CONCATENATED MODULE: ./esm/postprocess/PostProcessShaderPass.js\n\nclass PostProcessShaderPass_PostProcessShaderPass extends ShaderPass/* ShaderPass */.T {\n  get tDiffuse() {\n    return this.uniforms.tDiffuse.value;\n  }\n  set tDiffuse(value) {\n    this.uniforms.tDiffuse.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/postprocess/index.js\n\n\n\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShader.js\n\n\n\nclass PeripheralLightShader_PeripheralLightShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 5.0\n      },\n      radiusInner: {\n        value: 0.75\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      },\n      color: {\n        value: new Color(0, 0, 0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/PeripheralLightShaderPass.js\n\n\n/**\n * 周辺光量の減光を表現するフィルタ。\n */\nclass PeripheralLightShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  constructor() {\n    super(new PeripheralLightShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/peripheralLight/index.js\n\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShader.js\n\n\n\nclass ChromaticAberrationShader_ChromaticAberrationShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rate: {\n        value: 1.0\n      },\n      radiusInner: {\n        value: 0.25\n      },\n      radiusOuter: {\n        value: Math.sqrt(2.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/ChromaticAberrationShaderPass.js\n\n\nclass ChromaticAberrationShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get rate() {\n    return this.uniforms.rate.value;\n  }\n  set rate(value) {\n    this.uniforms.rate.value = value;\n  }\n  get radiusInner() {\n    return this.uniforms.radiusInner.value;\n  }\n  set radiusInner(value) {\n    this.uniforms.radiusInner.value = value;\n  }\n  get radiusOuter() {\n    return this.uniforms.radiusOuter.value;\n  }\n  set radiusOuter(value) {\n    this.uniforms.radiusOuter.value = value;\n  }\n  constructor() {\n    super(new ChromaticAberrationShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/chromaticAberration/index.js\n\n;// CONCATENATED MODULE: ./esm/mix/MixShader.js\n\n\n\nclass MixShader_MixShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      mixTexture: {\n        value: null\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/MixShaderPass.js\n\n\n/**\n * 他のエフェクトコンポーザーの描画結果を受け取り、自身のレンダリング結果に乗算するShaderPass\n */\nclass MixShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get mixTexture() {\n    return this.uniforms.mixTexture.value;\n  }\n  set mixTexture(value) {\n    this.uniforms.mixTexture.value = value;\n  }\n  constructor(mixTexture) {\n    super(new MixShader());\n    this.mixTexture = mixTexture;\n  }\n}\n;// CONCATENATED MODULE: ./esm/mix/index.js\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js + 1 modules\nvar UnrealBloomPass = __webpack_require__(275);\n;// CONCATENATED MODULE: ./esm/bloom/MaterialStorage.js\n/**\n * Bloom設定に応じて、オリジナルのマテリアルを格納するためのオブジェクト。\n * Object3D.userData.materialStorageに格納される。\n */\nclass MaterialStorage {\n  updateMaterial(original) {\n    this.original = original;\n    this.copyMaterialArray();\n    this.darkenMaterialArray(this.dark);\n  }\n  copyMaterialArray() {\n    if (this.isClone()) {\n      this.cloneToDark();\n    } else {\n      this.copyToDark();\n    }\n  }\n  /**\n   * darkenマテリアルのコピーに、クローンを使用するかcopyを使用するかを判定する。\n   */\n  isClone() {\n    const darkenHead = this.getHeadMaterial(this.dark);\n    const originalHead = this.getHeadMaterial(this.original);\n    if (darkenHead == null || darkenHead.type !== originalHead.type) {\n      return true;\n    }\n    return false;\n  }\n  getHeadMaterial(mat) {\n    const isArray = Array.isArray(mat);\n    if (isArray) return mat[0];\n    return mat;\n  }\n  copyToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark.forEach((drk, index) => {\n        drk.copy(this.original[index]);\n      });\n    } else {\n      this.dark.copy(this.original);\n    }\n  }\n  cloneToDark() {\n    const isArrayOriginal = Array.isArray(this.original);\n    if (isArrayOriginal) {\n      this.dark = this.original.map(val => {\n        return val.clone();\n      });\n    } else {\n      this.dark = this.original.clone();\n    }\n  }\n  darkenMaterialArray(material) {\n    if (!Array.isArray(material)) {\n      MaterialStorage.darkenMaterial(material);\n      return;\n    }\n    material.forEach(mat => {\n      MaterialStorage.darkenMaterial(mat);\n    });\n  }\n  /**\n   * マテリアルを反射光のない黒に書き換える。\n   * @param material\n   */\n  static darkenMaterial(material) {\n    if (material["color"] != null) {\n      material["color"].setHex(0);\n    }\n    if (material["shininess"] != null) {\n      material["shininess"] = 0;\n    }\n    if (material["specular"] != null) {\n      material["specular"].setHex(0);\n    }\n    if (material["emissive"] != null) {\n      material["emissive"].setHex(0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/MaterialSwitcher.js\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassにおいて、マテリアルの切り替え処理を担当するクラス。\n */\nclass MaterialSwitcher {\n  constructor(scene) {\n    this.darkenNonBloomed = () => {\n      this.scene.traverseVisible(this.switchToDarken);\n    };\n    this.restoreMaterial = () => {\n      this.scene.traverseVisible(this.switchToOriginalMaterial);\n    };\n    /**\n     * scene上の各オブジェクトに対して、マテリアルの切り替えを行う。\n     * bloom対象外であれば#000のマテリアルに。\n     *\n     * @param obj sceneをtraverseして取得したオブジェクト。\n     */\n    this.switchToDarken = obj => {\n      if (!this.isDarken(obj)) return;\n      if (obj.userData.materialStorage == null) {\n        obj.userData.materialStorage = new MaterialStorage();\n      }\n      const storage = obj.userData.materialStorage;\n      const mesh = obj;\n      storage.updateMaterial(mesh.material);\n      mesh.material = storage.dark;\n    };\n    /**\n     * マテリアルストレージに格納されたオリジナルのマテリアル設定に復帰する。\n     * @param obj\n     */\n    this.switchToOriginalMaterial = obj => {\n      if (!this.isDarken(obj)) return;\n      const mesh = obj;\n      mesh.material = obj.userData.materialStorage.original;\n    };\n    this.scene = scene;\n    this.layers = new three_module/* Layers */.S9g();\n    this.layers.set(BloomEffectComposer.BLOOM);\n  }\n  /**\n   * そのオブジェクトがbloomマスクの対象か否かを判定する。\n   * @param obj\n   */\n  isDarken(obj) {\n    if (obj.isMesh == null && obj.isLine == null) return false;\n    return !this.layers.test(obj.layers);\n  }\n}\n;// CONCATENATED MODULE: ./esm/bloom/BloomEffectComposer.js\n\n\n\n\n\n/**\n * 切り替え可能なUnrealBloomPassを内包したEffectComposer.\n * BloomEffectComposer.BLOOMレイヤーに含まれるオブジェクトのみをBloomさせる.\n */\nclass BloomEffectComposer extends PostProcessEffectComposer {\n  constructor(scene, renderer, renderPassOption) {\n    super(renderer);\n    this.switcher = new MaterialSwitcher(scene);\n    const size = renderer.getSize(new three_module/* Vector2 */.FM8());\n    this.bloomPass = new UnrealBloomPass/* UnrealBloomPass */.m(size, 1.5, 0.4, 0.4);\n    // TODO : PR d.ts\n    // @ts-ignore\n    this.renderToScreen = false;\n    RenderPassOption.init(renderPassOption);\n    this.addPass(renderPassOption.renderPass);\n    this.addPass(this.bloomPass);\n    this.onBeforeRender = this.switcher.darkenNonBloomed;\n    this.onAfterRender = this.switcher.restoreMaterial;\n  }\n  /**\n   * 描画結果を反映したテクスチャを取得する。\n   */\n  get result() {\n    return this.renderTarget2.texture;\n  }\n}\nBloomEffectComposer.ENTIRE = 0;\nBloomEffectComposer.BLOOM = 30;\n;// CONCATENATED MODULE: ./esm/bloom/index.js\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/shaders/FXAAShader.js\nvar FXAAShader = __webpack_require__(993);\n;// CONCATENATED MODULE: ./esm/fxaa/FXAAShaderPass.js\n\n\n/**\n * FXAAShaderを組み込み済みのShaderPass\n */\nclass FXAAShaderPass extends PostProcessShaderPass_PostProcessShaderPass {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super(FXAAShader/* FXAAShader */.C);\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    const uniforms = this.material.uniforms;\n    uniforms.resolution.value.x = 1 / width;\n    uniforms.resolution.value.y = 1 / height;\n  }\n}\n;// CONCATENATED MODULE: ./esm/fxaa/index.js\n\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShader.js\n\n\n\n\nclass DisplacementMapShader_DisplacementMapShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      strengthX: {\n        value: 0.0\n      },\n      strengthY: {\n        value: 0.0\n      },\n      map: {\n        value: null\n      },\n      hasMap: {\n        value: false\n      },\n      aspect: {\n        value: new Vector2(1.0, 1.0)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/DisplacementMapShaderPass.js\n\n\n\n\n/**\n * DisplacementMapによって画面を歪ませるShaderPass\n */\nclass DisplacementMapShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get map() {\n    return this.uniforms.map.value;\n  }\n  /**\n   * DisplacementMapを読み込む。\n   * 読み込み後にアスペクト比の補正を行う。\n   *\n   * @param url\n   */\n  loadMap(url) {\n    const texture = new TextureLoader().load(url, texture => {\n      this.mapSizeW = texture.image.width;\n      this.mapSizeH = texture.image.height;\n      this.updateAspect();\n    });\n    this.uniforms.map.value = texture;\n    this.uniforms.hasMap.value = texture != null;\n  }\n  get strengthX() {\n    return this.uniforms.strengthX.value;\n  }\n  set strengthX(value) {\n    this.uniforms.strengthX.value = value;\n  }\n  get strengthY() {\n    return this.uniforms.strengthY.value;\n  }\n  set strengthY(value) {\n    this.uniforms.strengthY.value = value;\n  }\n  constructor() {\n    super(new DisplacementMapShader());\n  }\n  setSize(width, height) {\n    super.setSize(width, height);\n    this.rendererSizeW = width;\n    this.rendererSizeH = height;\n    this.updateAspect();\n  }\n  updateAspect() {\n    if (this.mapSizeW == null || this.rendererSizeW == null) {\n      return;\n    }\n    const rendererAspect = this.rendererSizeW / this.rendererSizeH;\n    const mapAspect = this.mapSizeW / this.mapSizeH;\n    if (rendererAspect > mapAspect) {\n      this.uniforms.aspect.value = new Vector2(1.0, mapAspect / rendererAspect);\n    } else {\n      this.uniforms.aspect.value = new Vector2(rendererAspect / mapAspect, 1.0);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/displacement/index.js\n\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShader.js\n\n\n\nclass ColorFilterShader_ColorFilterShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      h: {\n        value: 0.0\n      },\n      multiS: {\n        value: 1.0\n      },\n      multiB: {\n        value: 1.0\n      },\n      addS: {\n        value: 0.0\n      },\n      addB: {\n        value: 0.0\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/ColorFilterShaderPass.js\n\n\n/**\n * hsb値をオフセットして、色を変化させるシェーダーパス\n *\n * 例 )\n * multiS = 0.0, addB = 1.0にすると白に飽和する。\n * multiB = 0.0, もしくはaddB = -1.0 でブラックアウト。\n */\nclass ColorFilterShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get h() {\n    return this.uniforms.h.value;\n  }\n  set h(value) {\n    this.uniforms.h.value = value;\n  }\n  get multiS() {\n    return this.uniforms.multiS.value;\n  }\n  set multiS(value) {\n    this.uniforms.multiS.value = value;\n  }\n  get multiB() {\n    return this.uniforms.multiB.value;\n  }\n  set multiB(value) {\n    this.uniforms.multiB.value = value;\n  }\n  get addS() {\n    return this.uniforms.addS.value;\n  }\n  set addS(value) {\n    this.uniforms.addS.value = value;\n  }\n  get addB() {\n    return this.uniforms.addB.value;\n  }\n  set addB(value) {\n    this.uniforms.addB.value = value;\n  }\n  constructor() {\n    super(new ColorFilterShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/colorFilter/index.js\n\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShader.js\n\n\n\nclass MonotoneShader_MonotoneShader extends (/* unused pure expression or super */ null && (PostProcessShader)) {\n  constructor() {\n    super();\n    this.fragmentShader = FragmentShader();\n  }\n  initUniform() {\n    super.initUniform();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      strength: {\n        value: 1.0\n      },\n      color: {\n        value: new Color(0xffffff)\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/MonotoneShaderPass.js\n\n\n/**\n *\n */\nclass MonotoneShaderPass extends (/* unused pure expression or super */ null && (PostProcessShaderPass)) {\n  get color() {\n    return this.uniforms.color.value;\n  }\n  set color(value) {\n    this.uniforms.color.value = value;\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  constructor() {\n    super(new MonotoneShader());\n  }\n}\n;// CONCATENATED MODULE: ./esm/monotone/index.js\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(899);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/postprocessing/SMAAPass.js\nvar SMAAPass = __webpack_require__(998);\n;// CONCATENATED MODULE: ./demoSrc/CommonGUI.js\nclass CommonGUI {\n  static initGUIResolution(gui, postRenderer) {\n    const size = postRenderer.getSize();\n    const prop = {\n      width: size.width,\n      height: size.height\n    };\n    const onChange = () => {\n      postRenderer.setSize(prop.width, prop.height);\n    };\n    const folder = gui.addFolder("Resolution");\n    folder.add(prop, "width", 2, 1920).step(1).onChange(onChange);\n    folder.add(prop, "height", 2, 1080).step(1).onChange(onChange);\n    folder.open();\n  }\n  static initColorGUI(folder, target, propName = "color") {\n    const prop = {};\n    const targetColor = target[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n}\n;// CONCATENATED MODULE: ./demoSrc/demoAA.js\n\n\n\n\n\n\n\nclass StudyBloom {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      antialias: false\n    });\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    this.initObject(scene);\n    this.postRenderer = new PostProcessRenderer(scene, camera, renderer);\n    const size = renderer.getSize(new three_module/* Vector2 */.FM8());\n    //TODO : PR d.ts. SMAAPass(w,h) is optional.\n    this.smaaPass = new SMAAPass/* SMAAPass */.d(size.width, size.height);\n    this.fxaaPass = new FXAAShaderPass();\n    this.postRenderer.addComposer([this.fxaaPass, this.smaaPass]);\n    esm/* RAFTicker.on */.F.on("tick", this.postRenderer.render);\n    this.initGUI();\n  }\n  initObject(scene) {\n    const spot = new three_module/* PointLight */.cek(0xffffff, 3, 0, 2);\n    spot.position.set(0, 0, 0);\n    scene.add(spot);\n    const helper = new three_module/* PointLightHelper */.xG9(spot, 2, 0);\n    scene.add(helper);\n    const geo = new three_module/* SphereGeometry */.xo$(10, 32, 32);\n    const mat = new three_module/* MeshLambertMaterial */.YBo({\n      fog: scene.fog !== undefined,\n      wireframe: true,\n      color: new three_module/* Color */.Ilk(0xffffff)\n    });\n    this.center = new three_module/* Mesh */.Kj0(geo, mat);\n    this.center.layers.enable(BloomEffectComposer.BLOOM);\n    scene.add(this.center);\n  }\n  initGUI() {\n    const gui = new lil_gui_esm/* default */.ZP();\n    this.initPassGUI(gui);\n    CommonGUI.initGUIResolution(gui, this.postRenderer);\n  }\n  initPassGUI(gui) {\n    const folder = gui.addFolder("Anti Aliasing");\n    const AntiAliasingType = {\n      None: 0,\n      SMAA: 1,\n      FXAA: 2\n    };\n    const prop = {\n      AA_Type: AntiAliasingType.None\n    };\n    const onChanged = val => {\n      this.smaaPass.enabled = val == AntiAliasingType.SMAA;\n      this.fxaaPass.enabled = val == AntiAliasingType.FXAA;\n    };\n    folder.add(prop, "AA_Type", {\n      None: AntiAliasingType.None,\n      FXAA: AntiAliasingType.FXAA,\n      SMAA: AntiAliasingType.SMAA\n    }).onChange(onChanged);\n    folder.open();\n    onChanged(prop.AA_Type);\n  }\n}\nwindow.onload = () => {\n  const study = new StudyBloom();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTLEVBQUU7TUFDcEJxQyxJQUFJLEVBQUVELGdCQUFnQixDQUFDQyxJQUFJO01BQzNCRSxJQUFJLEVBQUVILGdCQUFnQixDQUFDRyxJQUFJO01BQzNCRCxJQUFJLEVBQUVGLGdCQUFnQixDQUFDRTtJQUN6QixDQUFDLENBQUMsQ0FDRHJDLFFBQVEsQ0FBQ3dDLFNBQVMsQ0FBQztJQUV0QnZDLE1BQU0sQ0FBQ0csSUFBSSxDQUFDLENBQUM7SUFFYm9DLFNBQVMsQ0FBQ3pDLElBQUksQ0FBQ3dDLE9BQU8sQ0FBQztFQUN6QjtBQUNGO0FBRUE5TCxNQUFNLENBQUNnTSxNQUFNLEdBQUcsTUFBTTtFQUNwQixNQUFNQyxLQUFLLEdBQUcsSUFBSXRCLFVBQVUsQ0FBQyxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZGVtb1NyYy9Db21tb24uanM/MmMwNyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIuanM/ZTUzZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzUmVuZGVyZXIuanM/MGZjZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3Bvc3Rwcm9jZXNzL1Bvc3RQcm9jZXNzU2hhZGVyUGFzcy5qcz9kOGIzIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vcG9zdHByb2Nlc3MvaW5kZXguanM/YWQzNyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3BlcmlwaGVyYWxMaWdodC9QZXJpcGhlcmFsTGlnaHRTaGFkZXIuanM/OGJmYyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL3BlcmlwaGVyYWxMaWdodC9QZXJpcGhlcmFsTGlnaHRTaGFkZXJQYXNzLmpzP2FjYjYiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9wZXJpcGhlcmFsTGlnaHQvaW5kZXguanM/NzMyNyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Nocm9tYXRpY0FiZXJyYXRpb24vQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlci5qcz9jM2Q0Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vY2hyb21hdGljQWJlcnJhdGlvbi9DaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyUGFzcy5qcz83NDlmIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vY2hyb21hdGljQWJlcnJhdGlvbi9pbmRleC5qcz9iNjYyIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vbWl4L01peFNoYWRlci5qcz8zMTlkIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vbWl4L01peFNoYWRlclBhc3MuanM/MWFhNiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21peC9pbmRleC5qcz83NTMyIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vYmxvb20vTWF0ZXJpYWxTdG9yYWdlLmpzPzg0ZjUiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9ibG9vbS9NYXRlcmlhbFN3aXRjaGVyLmpzP2VmMDAiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9ibG9vbS9CbG9vbUVmZmVjdENvbXBvc2VyLmpzP2ZkYWEiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9ibG9vbS9pbmRleC5qcz85YzFiIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vZnhhYS9GWEFBU2hhZGVyUGFzcy5qcz9lNjI4Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vZnhhYS9pbmRleC5qcz8yNzgzIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vZGlzcGxhY2VtZW50L0Rpc3BsYWNlbWVudE1hcFNoYWRlci5qcz9iZjdhIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vZGlzcGxhY2VtZW50L0Rpc3BsYWNlbWVudE1hcFNoYWRlclBhc3MuanM/ZDkxZCIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2Rpc3BsYWNlbWVudC9pbmRleC5qcz84Y2EzIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vY29sb3JGaWx0ZXIvQ29sb3JGaWx0ZXJTaGFkZXIuanM/MjQ3MyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL2NvbG9yRmlsdGVyL0NvbG9yRmlsdGVyU2hhZGVyUGFzcy5qcz9lY2M0Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9lc20vY29sb3JGaWx0ZXIvaW5kZXguanM/NGI4ZiIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21vbm90b25lL01vbm90b25lU2hhZGVyLmpzP2E1YzUiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9tb25vdG9uZS9Nb25vdG9uZVNoYWRlclBhc3MuanM/MDYyYyIsIndlYnBhY2s6Ly90aHJlZWpzLXBvc3Rwcm9jZXNzLy4vZXNtL21vbm90b25lL2luZGV4LmpzPzJkOTMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1wb3N0cHJvY2Vzcy8uL2VzbS9pbmRleC5qcz9iMjM5Iiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9kZW1vU3JjL0NvbW1vbkdVSS5qcz83MWQwIiwid2VicGFjazovL3RocmVlanMtcG9zdHByb2Nlc3MvLi9kZW1vU3JjL2RlbW9BQS5qcz8zYzk4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFtYmllbnRMaWdodCxcbiAgQXhlc0hlbHBlcixcbiAgQ29sb3IsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgV2ViR0xSZW5kZXJlcixcbn0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21tb24ge1xuICBzdGF0aWMgaW5pdFNjZW5lKCkge1xuICAgIGNvbnN0IHNjZW5lID0gbmV3IFNjZW5lKCk7XG4gICAgcmV0dXJuIHNjZW5lO1xuICB9XG5cbiAgc3RhdGljIGluaXRMaWdodChzY2VuZSkge1xuICAgIGNvbnN0IGFtYmllbnRMaWdodCA9IG5ldyBBbWJpZW50TGlnaHQoMHhmZmZmZmYsIDEuMCk7XG4gICAgc2NlbmUuYWRkKGFtYmllbnRMaWdodCk7XG4gICAgcmV0dXJuIGFtYmllbnRMaWdodDtcbiAgfVxuXG4gIHN0YXRpYyBpbml0Q2FtZXJhKHNjZW5lLCBXLCBILCBuZWFyID0gMSwgZmFyID0gNDAwKSB7XG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCBXIC8gSCwgbmVhciwgZmFyKTtcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEwMCk7XG4gICAgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKGZhbHNlKTtcbiAgICBzY2VuZS5hZGQoY2FtZXJhKTtcbiAgICByZXR1cm4gY2FtZXJhO1xuICB9XG5cbiAgc3RhdGljIGluaXRDb250cm9sKGNhbWVyYSwgcmVuZGVyKSB7XG4gICAgbGV0IGRvbUVsZW1lbnQ7XG4gICAgaWYgKHJlbmRlcikge1xuICAgICAgZG9tRWxlbWVudCA9IHJlbmRlci5kb21FbGVtZW50O1xuICAgIH1cbiAgICBjb25zdCBjb250cm9sID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCBkb21FbGVtZW50KTtcbiAgICBjb250cm9sLnVwZGF0ZSgpO1xuICAgIHJldHVybiBjb250cm9sO1xuICB9XG5cbiAgc3RhdGljIGluaXRSZW5kZXJlcihXLCBILCBvcHRpb24pIHtcbiAgICBvcHRpb24gPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBjb2xvcjogMHgwMDAwMDAsXG4gICAgICAgIGlkOiBcIndlYmdsLWNhbnZhc1wiLFxuICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICB9LFxuICAgICAgb3B0aW9uXG4gICAgKTtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBXZWJHTFJlbmRlcmVyKHtcbiAgICAgIGNhbnZhczogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9uLmlkKSxcbiAgICAgIGFudGlhbGlhczogb3B0aW9uLmFudGlhbGlhcyxcbiAgICB9KTtcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKG5ldyBDb2xvcihvcHRpb24uY29sb3IpKTtcbiAgICByZW5kZXJlci5zZXRTaXplKFcsIEgpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIHJldHVybiByZW5kZXJlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0SGVscGVyKHNjZW5lKSB7XG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBBeGVzSGVscGVyKDMwKTtcbiAgICBzY2VuZS5hZGQoYXhlc0hlbHBlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IEVmZmVjdENvbXBvc2VyIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9FZmZlY3RDb21wb3NlclwiO1xuLyoqXG4gKiDjg6zjg7Pjg4Djg6rjg7PjgrDjga7liY3lvozjgavku7vmhI/jga7lh6bnkIbjgpLlrp/ooYzjgZnjgovmqZ/og73jgpLov73liqDjgZfjgZ9FZmZlY3RDb21wb3Nlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIgZXh0ZW5kcyBFZmZlY3RDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmVjdG9yMiwgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFJlbmRlclBhc3MgfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL1JlbmRlclBhc3NcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIgfSBmcm9tIFwiLi9Qb3N0UHJvY2Vzc0VmZmVjdENvbXBvc2VyXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXJFdmVudENvbnRleHQgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG4vKipcbiAqIOikh+aVsOOBruOCqOODleOCp+OCr+ODiOOCs+ODs+ODneODvOOCtuODvOOBqOOAgVdlYkdMUmVuZGVyZXLjgpLnrqHnkIbjgZfjgIFcbiAqIOmAo+e2muOBl+OBpuODneOCueODiOOCqOODleOCp+OCr+ODiOWHpueQhuOCkuihjOOBhuOBn+OCgeOBruOCr+ODqeOCueOAglxuICovXG5leHBvcnQgY2xhc3MgUG9zdFByb2Nlc3NSZW5kZXJlciB7XG4gICAgZ2V0IGNvbXBvc2VycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvc2VycztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIGNhbWVyYSwgcmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5fY29tcG9zZXJzID0gW107XG4gICAgICAgIHRoaXMucmVuZGVyID0gKGFyZykgPT4ge1xuICAgICAgICAgICAgbGV0IGRlbHRhO1xuICAgICAgICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIFJBRlRpY2tlckV2ZW50Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGRlbHRhID0gYXJnLmRlbHRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsdGEgPSBhcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jb21wb3NlcnMuZm9yRWFjaCgoY29tcG9zZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvc2VyLmVuYWJsZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9zZXIub25CZWZvcmVSZW5kZXIpXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2VyLm9uQmVmb3JlUmVuZGVyKGRlbHRhKTtcbiAgICAgICAgICAgICAgICBjb21wb3Nlci5yZW5kZXIoZGVsdGEpO1xuICAgICAgICAgICAgICAgIGlmIChjb21wb3Nlci5vbkFmdGVyUmVuZGVyKVxuICAgICAgICAgICAgICAgICAgICBjb21wb3Nlci5vbkFmdGVyUmVuZGVyKGRlbHRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCt+OCp+ODvOODgOODvOODkeOCueOCkuaMn+OCk+OBoEVmZmVjdENvbXBvc2Vy44KS55Sf5oiQ44CB55m76Yyy44GZ44KL44CCXG4gICAgICogQHBhcmFtIHBhc3Nlc1xuICAgICAqIEBwYXJhbSByZW5kZXJQYXNzXG4gICAgICovXG4gICAgYWRkQ29tcG9zZXIocGFzc2VzLCByZW5kZXJQYXNzKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvc2VyID0gUG9zdFByb2Nlc3NSZW5kZXJlci5nZXRDb21wb3NlcihwYXNzZXMsIHRoaXMucmVuZGVyZXIsIHtcbiAgICAgICAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxuICAgICAgICAgICAgY2FtZXJhOiB0aGlzLmNhbWVyYSxcbiAgICAgICAgICAgIHJlbmRlclBhc3M6IHJlbmRlclBhc3MsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9jb21wb3NlcnMucHVzaChjb21wb3Nlcik7XG4gICAgICAgIHJldHVybiBjb21wb3NlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Kz44Oz44Od44O844K244O844KS55Sf5oiQ44GZ44KL44CCXG4gICAgICogQHBhcmFtIHBhc3Nlc1xuICAgICAqIEBwYXJhbSByZW5kZXJlclxuICAgICAqIEBwYXJhbSByZW5kZXJQYXNzT3B0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGdldENvbXBvc2VyKHBhc3NlcywgcmVuZGVyZXIsIHJlbmRlclBhc3NPcHRpb24pIHtcbiAgICAgICAgUmVuZGVyUGFzc09wdGlvbi5pbml0KHJlbmRlclBhc3NPcHRpb24pO1xuICAgICAgICBjb25zdCBjb21wb3NlciA9IG5ldyBQb3N0UHJvY2Vzc0VmZmVjdENvbXBvc2VyKHJlbmRlcmVyKTtcbiAgICAgICAgY29tcG9zZXIuYWRkUGFzcyhyZW5kZXJQYXNzT3B0aW9uLnJlbmRlclBhc3MpO1xuICAgICAgICBwYXNzZXMuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgY29tcG9zZXIuYWRkUGFzcyhwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb21wb3NlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Km44Kj44Oz44OJ44Km44Oq44K144Kk44K65pmC44Gu5Yem55CGXG4gICAgICogQHBhcmFtIHdcbiAgICAgKiBAcGFyYW0gaFxuICAgICAqL1xuICAgIHNldFNpemUodywgaCkge1xuICAgICAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB3IC8gaDtcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUodywgaCk7XG4gICAgICAgIHRoaXMuX2NvbXBvc2Vycy5mb3JFYWNoKChjb21wb3NlcikgPT4ge1xuICAgICAgICAgICAgY29tcG9zZXIuc2V0U2l6ZSh3LCBoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlYkdMUmVuZGVyZXLjga7jg6zjg7Pjg4Djg6rjg7PjgrDjgrXjgqTjgrrjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKi9cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5nZXRTaXplKG5ldyBWZWN0b3IyKCkpO1xuICAgIH1cbn1cbi8qKlxuICogZ2V0Q29tcG9zZXLplqLmlbDjgafliKnnlKjjgZnjgotSZW5kZXJQYXNz5Yid5pyf5YyW44Kq44OX44K344On44OzXG4gKlxuICogc2NlbmXjgahjYW1lcmHjga7jgrvjg4Pjg4jjgIHjgoLjgZfjgY/jga9yZW5kZXJQYXNz44Kk44Oz44K544K/44Oz44K544KS5Luj5YWl44GZ44KL5b+F6KaB44GM44GC44KL44CCXG4gKiBzY2VuZeOBqGNhbWVyYeOBruOCu+ODg+ODiOOBruWgtOWQiCA6IFJlbmRlclBhc3PjgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgovjgIJcbiAqIHJlbmRlclBhc3PjgqTjg7Pjgrnjgr/jg7Pjgrnjga7loLTlkIggOiDjgZ3jga7jgb7jgb5yZW5kZXJQYXNz44Kk44Oz44K544K/44Oz44K544KS5Yip55So44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJQYXNzT3B0aW9uIHtcbiAgICBzdGF0aWMgaW5pdChvcHRpb24pIHtcbiAgICAgICAgaWYgKG9wdGlvbi5yZW5kZXJQYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbi5yZW5kZXJQYXNzID0gbmV3IFJlbmRlclBhc3Mob3B0aW9uLnNjZW5lLCBvcHRpb24uY2FtZXJhKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclBhc3MgfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL3Bvc3Rwcm9jZXNzaW5nL1NoYWRlclBhc3NcIjtcbmV4cG9ydCBjbGFzcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3MgZXh0ZW5kcyBTaGFkZXJQYXNzIHtcbiAgICBnZXQgdERpZmZ1c2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnREaWZmdXNlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdERpZmZ1c2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy50RGlmZnVzZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL1Bvc3RQcm9jZXNzUmVuZGVyZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Bvc3RQcm9jZXNzU2hhZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Qb3N0UHJvY2Vzc1NoYWRlclBhc3NcIjtcbiIsImltcG9ydCB7IFVuaWZvcm1zVXRpbHMsIENvbG9yIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL1BlcmlwaGVyYWxMaWdodC5mcmFnLmdsc2xcIjtcbmV4cG9ydCBjbGFzcyBQZXJpcGhlcmFsTGlnaHRTaGFkZXIgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBGcmFnbWVudFNoYWRlcigpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdFVuaWZvcm0oKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByYXRlOiB7IHZhbHVlOiA1LjAgfSxcbiAgICAgICAgICAgICAgICByYWRpdXNJbm5lcjogeyB2YWx1ZTogMC43NSB9LFxuICAgICAgICAgICAgICAgIHJhZGl1c091dGVyOiB7IHZhbHVlOiBNYXRoLnNxcnQoMi4wKSB9LFxuICAgICAgICAgICAgICAgIGNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoMCwgMCwgMCkgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQZXJpcGhlcmFsTGlnaHRTaGFkZXIgfSBmcm9tIFwiLi9QZXJpcGhlcmFsTGlnaHRTaGFkZXJcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB9IGZyb20gXCIuLi9pbmRleFwiO1xuLyoqXG4gKiDlkajovrrlhYnph4/jga7muJvlhYnjgpLooajnj77jgZnjgovjg5XjgqPjg6vjgr/jgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFBlcmlwaGVyYWxMaWdodFNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIGdldCByYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmF0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJhZGl1c0lubmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYWRpdXNJbm5lci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhZGl1c0lubmVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzSW5uZXIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJhZGl1c091dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yYWRpdXNPdXRlci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhZGl1c091dGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzT3V0ZXIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5jb2xvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNvbG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKG5ldyBQZXJpcGhlcmFsTGlnaHRTaGFkZXIoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vUGVyaXBoZXJhbExpZ2h0U2hhZGVyUGFzc1wiO1xuIiwiaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXIgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9DaHJvbWF0aWNBYmVycmF0aW9uLmZyYWcuZ2xzbFwiO1xuZXhwb3J0IGNsYXNzIENocm9tYXRpY0FiZXJyYXRpb25TaGFkZXIgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBGcmFnbWVudFNoYWRlcigpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdFVuaWZvcm0oKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByYXRlOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICByYWRpdXNJbm5lcjogeyB2YWx1ZTogMC4yNSB9LFxuICAgICAgICAgICAgICAgIHJhZGl1c091dGVyOiB7IHZhbHVlOiBNYXRoLnNxcnQoMi4wKSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENocm9tYXRpY0FiZXJyYXRpb25TaGFkZXIgfSBmcm9tIFwiLi9DaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlclBhc3MgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmV4cG9ydCBjbGFzcyBDaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyUGFzcyBleHRlbmRzIFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB7XG4gICAgZ2V0IHJhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJhdGUudmFsdWU7XG4gICAgfVxuICAgIHNldCByYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcmFkaXVzSW5uZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJhZGl1c0lubmVyLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmFkaXVzSW5uZXIodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5yYWRpdXNJbm5lci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcmFkaXVzT3V0ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJhZGl1c091dGVyLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmFkaXVzT3V0ZXIodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5yYWRpdXNPdXRlci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IENocm9tYXRpY0FiZXJyYXRpb25TaGFkZXIoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vQ2hyb21hdGljQWJlcnJhdGlvblNoYWRlclBhc3NcIjtcbiIsImltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vTWl4U2hhZGVyLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIE1peFNoYWRlciBleHRlbmRzIFBvc3RQcm9jZXNzU2hhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IEZyYWdtZW50U2hhZGVyKCk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtKCkge1xuICAgICAgICBzdXBlci5pbml0VW5pZm9ybSgpO1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1peFRleHR1cmU6IHsgdmFsdWU6IG51bGwgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlclBhc3MgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCB7IE1peFNoYWRlciB9IGZyb20gXCIuL01peFNoYWRlclwiO1xuLyoqXG4gKiDku5bjga7jgqjjg5Xjgqfjgq/jg4jjgrPjg7Pjg53jg7zjgrbjg7zjga7mj4/nlLvntZDmnpzjgpLlj5fjgZHlj5bjgorjgIHoh6rouqvjga7jg6zjg7Pjg4Djg6rjg7PjgrDntZDmnpzjgavkuZfnrpfjgZnjgotTaGFkZXJQYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBNaXhTaGFkZXJQYXNzIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIHtcbiAgICBnZXQgbWl4VGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubWl4VGV4dHVyZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IG1peFRleHR1cmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5taXhUZXh0dXJlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1peFRleHR1cmUpIHtcbiAgICAgICAgc3VwZXIobmV3IE1peFNoYWRlcigpKTtcbiAgICAgICAgdGhpcy5taXhUZXh0dXJlID0gbWl4VGV4dHVyZTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9NaXhTaGFkZXJQYXNzXCI7XG4iLCIvKipcbiAqIEJsb29t6Kit5a6a44Gr5b+c44GY44Gm44CB44Kq44Oq44K444OK44Or44Gu44Oe44OG44Oq44Ki44Or44KS5qC857SN44GZ44KL44Gf44KB44Gu44Kq44OW44K444Kn44Kv44OI44CCXG4gKiBPYmplY3QzRC51c2VyRGF0YS5tYXRlcmlhbFN0b3JhZ2XjgavmoLzntI3jgZXjgozjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIE1hdGVyaWFsU3RvcmFnZSB7XG4gICAgdXBkYXRlTWF0ZXJpYWwob3JpZ2luYWwpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgICAgICB0aGlzLmNvcHlNYXRlcmlhbEFycmF5KCk7XG4gICAgICAgIHRoaXMuZGFya2VuTWF0ZXJpYWxBcnJheSh0aGlzLmRhcmspO1xuICAgIH1cbiAgICBjb3B5TWF0ZXJpYWxBcnJheSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDbG9uZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmNsb25lVG9EYXJrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvcHlUb0RhcmsoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBkYXJrZW7jg57jg4bjg6rjgqLjg6vjga7jgrPjg5Tjg7zjgavjgIHjgq/jg63jg7zjg7PjgpLkvb/nlKjjgZnjgovjgYtjb3B544KS5L2/55So44GZ44KL44GL44KS5Yik5a6a44GZ44KL44CCXG4gICAgICovXG4gICAgaXNDbG9uZSgpIHtcbiAgICAgICAgY29uc3QgZGFya2VuSGVhZCA9IHRoaXMuZ2V0SGVhZE1hdGVyaWFsKHRoaXMuZGFyayk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsSGVhZCA9IHRoaXMuZ2V0SGVhZE1hdGVyaWFsKHRoaXMub3JpZ2luYWwpO1xuICAgICAgICBpZiAoZGFya2VuSGVhZCA9PSBudWxsIHx8IGRhcmtlbkhlYWQudHlwZSAhPT0gb3JpZ2luYWxIZWFkLnR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZ2V0SGVhZE1hdGVyaWFsKG1hdCkge1xuICAgICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShtYXQpO1xuICAgICAgICBpZiAoaXNBcnJheSlcbiAgICAgICAgICAgIHJldHVybiBtYXRbMF07XG4gICAgICAgIHJldHVybiBtYXQ7XG4gICAgfVxuICAgIGNvcHlUb0RhcmsoKSB7XG4gICAgICAgIGNvbnN0IGlzQXJyYXlPcmlnaW5hbCA9IEFycmF5LmlzQXJyYXkodGhpcy5vcmlnaW5hbCk7XG4gICAgICAgIGlmIChpc0FycmF5T3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGFyay5mb3JFYWNoKChkcmssIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgZHJrLmNvcHkodGhpcy5vcmlnaW5hbFtpbmRleF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhcmsuY29weSh0aGlzLm9yaWdpbmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9uZVRvRGFyaygpIHtcbiAgICAgICAgY29uc3QgaXNBcnJheU9yaWdpbmFsID0gQXJyYXkuaXNBcnJheSh0aGlzLm9yaWdpbmFsKTtcbiAgICAgICAgaWYgKGlzQXJyYXlPcmlnaW5hbCkge1xuICAgICAgICAgICAgdGhpcy5kYXJrID0gdGhpcy5vcmlnaW5hbC5tYXAodmFsID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLmNsb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGFyayA9IHRoaXMub3JpZ2luYWwuY2xvbmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkYXJrZW5NYXRlcmlhbEFycmF5KG1hdGVyaWFsKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtYXRlcmlhbCkpIHtcbiAgICAgICAgICAgIE1hdGVyaWFsU3RvcmFnZS5kYXJrZW5NYXRlcmlhbChtYXRlcmlhbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWF0ZXJpYWwuZm9yRWFjaChtYXQgPT4ge1xuICAgICAgICAgICAgTWF0ZXJpYWxTdG9yYWdlLmRhcmtlbk1hdGVyaWFsKG1hdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg57jg4bjg6rjgqLjg6vjgpLlj43lsITlhYnjga7jgarjgYTpu5Ljgavmm7jjgY3mj5vjgYjjgovjgIJcbiAgICAgKiBAcGFyYW0gbWF0ZXJpYWxcbiAgICAgKi9cbiAgICBzdGF0aWMgZGFya2VuTWF0ZXJpYWwobWF0ZXJpYWwpIHtcbiAgICAgICAgaWYgKG1hdGVyaWFsW1wiY29sb3JcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWxbXCJjb2xvclwiXS5zZXRIZXgoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGVyaWFsW1wic2hpbmluZXNzXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hdGVyaWFsW1wic2hpbmluZXNzXCJdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0ZXJpYWxbXCJzcGVjdWxhclwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbFtcInNwZWN1bGFyXCJdLnNldEhleCgwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0ZXJpYWxbXCJlbWlzc2l2ZVwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXRlcmlhbFtcImVtaXNzaXZlXCJdLnNldEhleCgwKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IExheWVycyB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgQmxvb21FZmZlY3RDb21wb3NlciB9IGZyb20gXCIuL0Jsb29tRWZmZWN0Q29tcG9zZXJcIjtcbmltcG9ydCB7IE1hdGVyaWFsU3RvcmFnZSB9IGZyb20gXCIuL01hdGVyaWFsU3RvcmFnZVwiO1xuLyoqXG4gKiDliIfjgormm7/jgYjlj6/og73jgapVbnJlYWxCbG9vbVBhc3PjgavjgYrjgYTjgabjgIHjg57jg4bjg6rjgqLjg6vjga7liIfjgormm7/jgYjlh6bnkIbjgpLmi4XlvZPjgZnjgovjgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIE1hdGVyaWFsU3dpdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lKSB7XG4gICAgICAgIHRoaXMuZGFya2VuTm9uQmxvb21lZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUudHJhdmVyc2VWaXNpYmxlKHRoaXMuc3dpdGNoVG9EYXJrZW4pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlc3RvcmVNYXRlcmlhbCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmUudHJhdmVyc2VWaXNpYmxlKHRoaXMuc3dpdGNoVG9PcmlnaW5hbE1hdGVyaWFsKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNjZW5l5LiK44Gu5ZCE44Kq44OW44K444Kn44Kv44OI44Gr5a++44GX44Gm44CB44Oe44OG44Oq44Ki44Or44Gu5YiH44KK5pu/44GI44KS6KGM44GG44CCXG4gICAgICAgICAqIGJsb29t5a++6LGh5aSW44Gn44GC44KM44GwIzAwMOOBruODnuODhuODquOCouODq+OBq+OAglxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gb2JqIHNjZW5l44KSdHJhdmVyc2XjgZfjgablj5blvpfjgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgIJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3dpdGNoVG9EYXJrZW4gPSAob2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNEYXJrZW4ob2JqKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAob2JqLnVzZXJEYXRhLm1hdGVyaWFsU3RvcmFnZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2JqLnVzZXJEYXRhLm1hdGVyaWFsU3RvcmFnZSA9IG5ldyBNYXRlcmlhbFN0b3JhZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2UgPSBvYmoudXNlckRhdGEubWF0ZXJpYWxTdG9yYWdlO1xuICAgICAgICAgICAgY29uc3QgbWVzaCA9IG9iajtcbiAgICAgICAgICAgIHN0b3JhZ2UudXBkYXRlTWF0ZXJpYWwobWVzaC5tYXRlcmlhbCk7XG4gICAgICAgICAgICBtZXNoLm1hdGVyaWFsID0gc3RvcmFnZS5kYXJrO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICog44Oe44OG44Oq44Ki44Or44K544OI44Os44O844K444Gr5qC857SN44GV44KM44Gf44Kq44Oq44K444OK44Or44Gu44Oe44OG44Oq44Ki44Or6Kit5a6a44Gr5b6p5biw44GZ44KL44CCXG4gICAgICAgICAqIEBwYXJhbSBvYmpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3dpdGNoVG9PcmlnaW5hbE1hdGVyaWFsID0gKG9iaikgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGFya2VuKG9iaikpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgbWVzaCA9IG9iajtcbiAgICAgICAgICAgIG1lc2gubWF0ZXJpYWwgPSBvYmoudXNlckRhdGEubWF0ZXJpYWxTdG9yYWdlLm9yaWdpbmFsO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgICAgIHRoaXMubGF5ZXJzID0gbmV3IExheWVycygpO1xuICAgICAgICB0aGlzLmxheWVycy5zZXQoQmxvb21FZmZlY3RDb21wb3Nlci5CTE9PTSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOBneOBruOCquODluOCuOOCp+OCr+ODiOOBjGJsb29t44Oe44K544Kv44Gu5a++6LGh44GL5ZCm44GL44KS5Yik5a6a44GZ44KL44CCXG4gICAgICogQHBhcmFtIG9ialxuICAgICAqL1xuICAgIGlzRGFya2VuKG9iaikge1xuICAgICAgICBpZiAob2JqLmlzTWVzaCA9PSBudWxsICYmIG9iai5pc0xpbmUgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuICF0aGlzLmxheWVycy50ZXN0KG9iai5sYXllcnMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIgfSBmcm9tIFwiLi4vcG9zdHByb2Nlc3MvUG9zdFByb2Nlc3NFZmZlY3RDb21wb3NlclwiO1xuaW1wb3J0IHsgVW5yZWFsQmxvb21QYXNzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9VbnJlYWxCbG9vbVBhc3NcIjtcbmltcG9ydCB7IFJlbmRlclBhc3NPcHRpb24gfSBmcm9tIFwiLi4vcG9zdHByb2Nlc3NcIjtcbmltcG9ydCB7IE1hdGVyaWFsU3dpdGNoZXIgfSBmcm9tIFwiLi9NYXRlcmlhbFN3aXRjaGVyXCI7XG4vKipcbiAqIOWIh+OCiuabv+OBiOWPr+iDveOBqlVucmVhbEJsb29tUGFzc+OCkuWGheWMheOBl+OBn0VmZmVjdENvbXBvc2VyLlxuICogQmxvb21FZmZlY3RDb21wb3Nlci5CTE9PTeODrOOCpOODpOODvOOBq+WQq+OBvuOCjOOCi+OCquODluOCuOOCp+OCr+ODiOOBruOBv+OCkkJsb29t44GV44Gb44KLLlxuICovXG5leHBvcnQgY2xhc3MgQmxvb21FZmZlY3RDb21wb3NlciBleHRlbmRzIFBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjZW5lLCByZW5kZXJlciwgcmVuZGVyUGFzc09wdGlvbikge1xuICAgICAgICBzdXBlcihyZW5kZXJlcik7XG4gICAgICAgIHRoaXMuc3dpdGNoZXIgPSBuZXcgTWF0ZXJpYWxTd2l0Y2hlcihzY2VuZSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSByZW5kZXJlci5nZXRTaXplKG5ldyBWZWN0b3IyKCkpO1xuICAgICAgICB0aGlzLmJsb29tUGFzcyA9IG5ldyBVbnJlYWxCbG9vbVBhc3Moc2l6ZSwgMS41LCAwLjQsIDAuNCk7XG4gICAgICAgIC8vIFRPRE8gOiBQUiBkLnRzXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5yZW5kZXJUb1NjcmVlbiA9IGZhbHNlO1xuICAgICAgICBSZW5kZXJQYXNzT3B0aW9uLmluaXQocmVuZGVyUGFzc09wdGlvbik7XG4gICAgICAgIHRoaXMuYWRkUGFzcyhyZW5kZXJQYXNzT3B0aW9uLnJlbmRlclBhc3MpO1xuICAgICAgICB0aGlzLmFkZFBhc3ModGhpcy5ibG9vbVBhc3MpO1xuICAgICAgICB0aGlzLm9uQmVmb3JlUmVuZGVyID0gdGhpcy5zd2l0Y2hlci5kYXJrZW5Ob25CbG9vbWVkO1xuICAgICAgICB0aGlzLm9uQWZ0ZXJSZW5kZXIgPSB0aGlzLnN3aXRjaGVyLnJlc3RvcmVNYXRlcmlhbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5o+P55S757WQ5p6c44KS5Y+N5pig44GX44Gf44OG44Kv44K544OB44Oj44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICovXG4gICAgZ2V0IHJlc3VsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVGFyZ2V0Mi50ZXh0dXJlO1xuICAgIH1cbn1cbkJsb29tRWZmZWN0Q29tcG9zZXIuRU5USVJFID0gMDtcbkJsb29tRWZmZWN0Q29tcG9zZXIuQkxPT00gPSAzMDtcbiIsImV4cG9ydCAqIGZyb20gXCIuL0Jsb29tRWZmZWN0Q29tcG9zZXJcIjtcbiIsImltcG9ydCAqIGFzIEZYQUFTaGFkZXJNb2R1bGUgZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9zaGFkZXJzL0ZYQUFTaGFkZXJcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyUGFzcyB9IGZyb20gXCIuLi9wb3N0cHJvY2Vzc1wiO1xuLyoqXG4gKiBGWEFBU2hhZGVy44KS57WE44G/6L6844G/5riI44G/44GuU2hhZGVyUGFzc1xuICovXG5leHBvcnQgY2xhc3MgRlhBQVNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihGWEFBU2hhZGVyTW9kdWxlW1wiRlhBQVNoYWRlclwiXSk7XG4gICAgfVxuICAgIHNldFNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBzdXBlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IHRoaXMubWF0ZXJpYWwudW5pZm9ybXM7XG4gICAgICAgIHVuaWZvcm1zLnJlc29sdXRpb24udmFsdWUueCA9IDEgLyB3aWR0aDtcbiAgICAgICAgdW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZS55ID0gMSAvIGhlaWdodDtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9GWEFBU2hhZGVyUGFzc1wiO1xuIiwiaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXIgfSBmcm9tIFwiLi4vaW5kZXhcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9EaXNwbGFjZW1lbnRNYXAuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcInRocmVlXCI7XG5leHBvcnQgY2xhc3MgRGlzcGxhY2VtZW50TWFwU2hhZGVyIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gRnJhZ21lbnRTaGFkZXIoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm0oKSB7XG4gICAgICAgIHN1cGVyLmluaXRVbmlmb3JtKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyZW5ndGhYOiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICBzdHJlbmd0aFk6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgICAgIG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgICAgIGhhc01hcDogeyB2YWx1ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICBhc3BlY3Q6IHsgdmFsdWU6IG5ldyBWZWN0b3IyKDEuMCwgMS4wKSB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IERpc3BsYWNlbWVudE1hcFNoYWRlciB9IGZyb20gXCIuL0Rpc3BsYWNlbWVudE1hcFNoYWRlclwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgeyBUZXh0dXJlTG9hZGVyIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIERpc3BsYWNlbWVudE1hcOOBq+OCiOOBo+OBpueUu+mdouOCkuatquOBvuOBm+OCi1NoYWRlclBhc3NcbiAqL1xuZXhwb3J0IGNsYXNzIERpc3BsYWNlbWVudE1hcFNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIGdldCBtYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm1hcC52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGxhY2VtZW50TWFw44KS6Kqt44G/6L6844KA44CCXG4gICAgICog6Kqt44G/6L6844G/5b6M44Gr44Ki44K544Oa44Kv44OI5q+U44Gu6KOc5q2j44KS6KGM44GG44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsXG4gICAgICovXG4gICAgbG9hZE1hcCh1cmwpIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlTG9hZGVyKCkubG9hZCh1cmwsIHRleHR1cmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXBTaXplVyA9IHRleHR1cmUuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICB0aGlzLm1hcFNpemVIID0gdGV4dHVyZS5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFzcGVjdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXAudmFsdWUgPSB0ZXh0dXJlO1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmhhc01hcC52YWx1ZSA9IHRleHR1cmUgIT0gbnVsbDtcbiAgICB9XG4gICAgZ2V0IHN0cmVuZ3RoWCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc3RyZW5ndGhYLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc3RyZW5ndGhYKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc3RyZW5ndGhYLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzdHJlbmd0aFkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnN0cmVuZ3RoWS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHN0cmVuZ3RoWSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnN0cmVuZ3RoWS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIobmV3IERpc3BsYWNlbWVudE1hcFNoYWRlcigpKTtcbiAgICB9XG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHN1cGVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXJTaXplVyA9IHdpZHRoO1xuICAgICAgICB0aGlzLnJlbmRlcmVyU2l6ZUggPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMudXBkYXRlQXNwZWN0KCk7XG4gICAgfVxuICAgIHVwZGF0ZUFzcGVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMubWFwU2l6ZVcgPT0gbnVsbCB8fCB0aGlzLnJlbmRlcmVyU2l6ZVcgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyQXNwZWN0ID0gdGhpcy5yZW5kZXJlclNpemVXIC8gdGhpcy5yZW5kZXJlclNpemVIO1xuICAgICAgICBjb25zdCBtYXBBc3BlY3QgPSB0aGlzLm1hcFNpemVXIC8gdGhpcy5tYXBTaXplSDtcbiAgICAgICAgaWYgKHJlbmRlcmVyQXNwZWN0ID4gbWFwQXNwZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLmFzcGVjdC52YWx1ZSA9IG5ldyBWZWN0b3IyKDEuMCwgbWFwQXNwZWN0IC8gcmVuZGVyZXJBc3BlY3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5hc3BlY3QudmFsdWUgPSBuZXcgVmVjdG9yMihyZW5kZXJlckFzcGVjdCAvIG1hcEFzcGVjdCwgMS4wKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gXCIuL0Rpc3BsYWNlbWVudE1hcFNoYWRlclBhc3NcIjtcbiIsImltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IFBvc3RQcm9jZXNzU2hhZGVyIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vQ29sb3JGaWx0ZXIuZnJhZy5nbHNsXCI7XG5leHBvcnQgY2xhc3MgQ29sb3JGaWx0ZXJTaGFkZXIgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBGcmFnbWVudFNoYWRlcigpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybSgpIHtcbiAgICAgICAgc3VwZXIuaW5pdFVuaWZvcm0oKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoOiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICBtdWx0aVM6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIG11bHRpQjogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgYWRkUzogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgYWRkQjogeyB2YWx1ZTogMC4wIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3JGaWx0ZXJTaGFkZXIgfSBmcm9tIFwiLi9Db2xvckZpbHRlclNoYWRlclwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL2luZGV4XCI7XG4vKipcbiAqIGhzYuWApOOCkuOCquODleOCu+ODg+ODiOOBl+OBpuOAgeiJsuOCkuWkieWMluOBleOBm+OCi+OCt+OCp+ODvOODgOODvOODkeOCuVxuICpcbiAqIOS+iyApXG4gKiBtdWx0aVMgPSAwLjAsIGFkZEIgPSAxLjDjgavjgZnjgovjgajnmb3jgavpo73lkozjgZnjgovjgIJcbiAqIG11bHRpQiA9IDAuMCwg44KC44GX44GP44GvYWRkQiA9IC0xLjAg44Gn44OW44Op44OD44Kv44Ki44Km44OI44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xvckZpbHRlclNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIGdldCBoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5oLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG11bHRpUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMubXVsdGlTLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgbXVsdGlTKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMubXVsdGlTLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBtdWx0aUIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLm11bHRpQi52YWx1ZTtcbiAgICB9XG4gICAgc2V0IG11bHRpQih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLm11bHRpQi52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYWRkUygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuYWRkUy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGFkZFModmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hZGRTLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBhZGRCKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5hZGRCLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgYWRkQih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmFkZEIudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKG5ldyBDb2xvckZpbHRlclNoYWRlcigpKTtcbiAgICB9XG59XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9Db2xvckZpbHRlclNoYWRlclBhc3NcIjtcbiIsImltcG9ydCB7IFVuaWZvcm1zVXRpbHMsIENvbG9yIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBQb3N0UHJvY2Vzc1NoYWRlciB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL01vbm90b25lLmZyYWcuZ2xzbFwiO1xuZXhwb3J0IGNsYXNzIE1vbm90b25lU2hhZGVyIGV4dGVuZHMgUG9zdFByb2Nlc3NTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gRnJhZ21lbnRTaGFkZXIoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm0oKSB7XG4gICAgICAgIHN1cGVyLmluaXRVbmlmb3JtKCk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyZW5ndGg6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIGNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHhmZmZmZmYpIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTW9ub3RvbmVTaGFkZXIgfSBmcm9tIFwiLi9Nb25vdG9uZVNoYWRlclwiO1xuaW1wb3J0IHsgUG9zdFByb2Nlc3NTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL2luZGV4XCI7XG4vKipcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBNb25vdG9uZVNoYWRlclBhc3MgZXh0ZW5kcyBQb3N0UHJvY2Vzc1NoYWRlclBhc3Mge1xuICAgIGdldCBjb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuY29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBjb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCBzdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihuZXcgTW9ub3RvbmVTaGFkZXIoKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vTW9ub3RvbmVTaGFkZXJQYXNzXCI7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9wb3N0cHJvY2Vzcy9cIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BlcmlwaGVyYWxMaWdodC9cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Nocm9tYXRpY0FiZXJyYXRpb24vXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9taXgvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9ibG9vbS9cIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Z4YWEvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kaXNwbGFjZW1lbnQvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb2xvckZpbHRlci9cIjtcbmV4cG9ydCAqIGZyb20gXCIuL21vbm90b25lL1wiO1xuIiwiZXhwb3J0IGNsYXNzIENvbW1vbkdVSSB7XG4gIHN0YXRpYyBpbml0R1VJUmVzb2x1dGlvbihndWksIHBvc3RSZW5kZXJlcikge1xuICAgIGNvbnN0IHNpemUgPSBwb3N0UmVuZGVyZXIuZ2V0U2l6ZSgpO1xuICAgIGNvbnN0IHByb3AgPSB7XG4gICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgfTtcblxuICAgIGNvbnN0IG9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgcG9zdFJlbmRlcmVyLnNldFNpemUocHJvcC53aWR0aCwgcHJvcC5oZWlnaHQpO1xuICAgIH07XG4gICAgY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlcihcIlJlc29sdXRpb25cIik7XG4gICAgZm9sZGVyLmFkZChwcm9wLCBcIndpZHRoXCIsIDIsIDE5MjApLnN0ZXAoMSkub25DaGFuZ2Uob25DaGFuZ2UpO1xuICAgIGZvbGRlci5hZGQocHJvcCwgXCJoZWlnaHRcIiwgMiwgMTA4MCkuc3RlcCgxKS5vbkNoYW5nZShvbkNoYW5nZSk7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0Q29sb3JHVUkoZm9sZGVyLCB0YXJnZXQsIHByb3BOYW1lID0gXCJjb2xvclwiKSB7XG4gICAgY29uc3QgcHJvcCA9IHt9O1xuICAgIGNvbnN0IHRhcmdldENvbG9yID0gdGFyZ2V0W3Byb3BOYW1lXTtcbiAgICBwcm9wW3Byb3BOYW1lXSA9IHRhcmdldENvbG9yLmdldEhleCgpO1xuICAgIGZvbGRlci5hZGRDb2xvcihwcm9wLCBwcm9wTmFtZSkub25DaGFuZ2UoKHZhbCkgPT4ge1xuICAgICAgdGFyZ2V0Q29sb3Iuc2V0SGV4KHZhbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIENvbG9yLFxuICBGb2csXG4gIE1lc2gsXG4gIE1lc2hMYW1iZXJ0TWF0ZXJpYWwsXG4gIFBvaW50TGlnaHQsXG4gIFBvaW50TGlnaHRIZWxwZXIsXG4gIFNwaGVyZUdlb21ldHJ5LFxuICBWZWN0b3IyLFxufSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCB7IENvbW1vbiB9IGZyb20gXCIuL0NvbW1vblwiO1xuaW1wb3J0IHsgQmxvb21FZmZlY3RDb21wb3NlciwgRlhBQVNoYWRlclBhc3MsIFBvc3RQcm9jZXNzUmVuZGVyZXIgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBHVUkgZnJvbSBcImxpbC1ndWlcIjtcbmltcG9ydCB7IFNNQUFQYXNzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9wb3N0cHJvY2Vzc2luZy9TTUFBUGFzc1wiO1xuaW1wb3J0IHsgQ29tbW9uR1VJIH0gZnJvbSBcIi4vQ29tbW9uR1VJXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBTdHVkeUJsb29tIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgVyA9IDY0MDtcbiAgICBjb25zdCBIID0gNDgwO1xuXG4gICAgY29uc3Qgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG4gICAgc2NlbmUuZm9nID0gbmV3IEZvZygweDAwMDAwMCwgODAsIDE2MCk7XG4gICAgQ29tbW9uLmluaXRMaWdodChzY2VuZSk7XG4gICAgY29uc3QgY2FtZXJhID0gQ29tbW9uLmluaXRDYW1lcmEoc2NlbmUsIFcsIEgpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gQ29tbW9uLmluaXRSZW5kZXJlcihXLCBILCB7IGFudGlhbGlhczogZmFsc2UgfSk7XG4gICAgY29uc3QgY29udHJvbCA9IENvbW1vbi5pbml0Q29udHJvbChjYW1lcmEsIHJlbmRlcmVyKTtcbiAgICBDb21tb24uaW5pdEhlbHBlcihzY2VuZSk7XG4gICAgdGhpcy5pbml0T2JqZWN0KHNjZW5lKTtcblxuICAgIHRoaXMucG9zdFJlbmRlcmVyID0gbmV3IFBvc3RQcm9jZXNzUmVuZGVyZXIoc2NlbmUsIGNhbWVyYSwgcmVuZGVyZXIpO1xuXG4gICAgY29uc3Qgc2l6ZSA9IHJlbmRlcmVyLmdldFNpemUobmV3IFZlY3RvcjIoKSk7XG4gICAgLy9UT0RPIDogUFIgZC50cy4gU01BQVBhc3ModyxoKSBpcyBvcHRpb25hbC5cbiAgICB0aGlzLnNtYWFQYXNzID0gbmV3IFNNQUFQYXNzKHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcbiAgICB0aGlzLmZ4YWFQYXNzID0gbmV3IEZYQUFTaGFkZXJQYXNzKCk7XG5cbiAgICB0aGlzLnBvc3RSZW5kZXJlci5hZGRDb21wb3NlcihbdGhpcy5meGFhUGFzcywgdGhpcy5zbWFhUGFzc10pO1xuICAgIFJBRlRpY2tlci5vbihcInRpY2tcIiwgdGhpcy5wb3N0UmVuZGVyZXIucmVuZGVyKTtcblxuICAgIHRoaXMuaW5pdEdVSSgpO1xuICB9XG5cbiAgaW5pdE9iamVjdChzY2VuZSkge1xuICAgIGNvbnN0IHNwb3QgPSBuZXcgUG9pbnRMaWdodCgweGZmZmZmZiwgMywgMCwgMik7XG4gICAgc3BvdC5wb3NpdGlvbi5zZXQoMCwgMCwgMCk7XG4gICAgc2NlbmUuYWRkKHNwb3QpO1xuICAgIGNvbnN0IGhlbHBlciA9IG5ldyBQb2ludExpZ2h0SGVscGVyKHNwb3QsIDIsIDApO1xuICAgIHNjZW5lLmFkZChoZWxwZXIpO1xuXG4gICAgY29uc3QgZ2VvID0gbmV3IFNwaGVyZUdlb21ldHJ5KDEwLCAzMiwgMzIpO1xuICAgIGNvbnN0IG1hdCA9IG5ldyBNZXNoTGFtYmVydE1hdGVyaWFsKHtcbiAgICAgIGZvZzogc2NlbmUuZm9nICE9PSB1bmRlZmluZWQsXG4gICAgICB3aXJlZnJhbWU6IHRydWUsXG4gICAgICBjb2xvcjogbmV3IENvbG9yKDB4ZmZmZmZmKSxcbiAgICB9KTtcblxuICAgIHRoaXMuY2VudGVyID0gbmV3IE1lc2goZ2VvLCBtYXQpO1xuICAgIHRoaXMuY2VudGVyLmxheWVycy5lbmFibGUoQmxvb21FZmZlY3RDb21wb3Nlci5CTE9PTSk7XG4gICAgc2NlbmUuYWRkKHRoaXMuY2VudGVyKTtcbiAgfVxuXG4gIGluaXRHVUkoKSB7XG4gICAgY29uc3QgZ3VpID0gbmV3IEdVSSgpO1xuICAgIHRoaXMuaW5pdFBhc3NHVUkoZ3VpKTtcbiAgICBDb21tb25HVUkuaW5pdEdVSVJlc29sdXRpb24oZ3VpLCB0aGlzLnBvc3RSZW5kZXJlcik7XG4gIH1cblxuICBpbml0UGFzc0dVSShndWkpIHtcbiAgICBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKFwiQW50aSBBbGlhc2luZ1wiKTtcblxuICAgIGNvbnN0IEFudGlBbGlhc2luZ1R5cGUgPSB7XG4gICAgICBOb25lOiAwLFxuICAgICAgU01BQTogMSxcbiAgICAgIEZYQUE6IDIsXG4gICAgfTtcbiAgICBjb25zdCBwcm9wID0ge1xuICAgICAgQUFfVHlwZTogQW50aUFsaWFzaW5nVHlwZS5Ob25lLFxuICAgIH07XG5cbiAgICBjb25zdCBvbkNoYW5nZWQgPSAodmFsKSA9PiB7XG4gICAgICB0aGlzLnNtYWFQYXNzLmVuYWJsZWQgPSB2YWwgPT0gQW50aUFsaWFzaW5nVHlwZS5TTUFBO1xuICAgICAgdGhpcy5meGFhUGFzcy5lbmFibGVkID0gdmFsID09IEFudGlBbGlhc2luZ1R5cGUuRlhBQTtcbiAgICB9O1xuXG4gICAgZm9sZGVyXG4gICAgICAuYWRkKHByb3AsIFwiQUFfVHlwZVwiLCB7XG4gICAgICAgIE5vbmU6IEFudGlBbGlhc2luZ1R5cGUuTm9uZSxcbiAgICAgICAgRlhBQTogQW50aUFsaWFzaW5nVHlwZS5GWEFBLFxuICAgICAgICBTTUFBOiBBbnRpQWxpYXNpbmdUeXBlLlNNQUEsXG4gICAgICB9KVxuICAgICAgLm9uQ2hhbmdlKG9uQ2hhbmdlZCk7XG5cbiAgICBmb2xkZXIub3BlbigpO1xuXG4gICAgb25DaGFuZ2VkKHByb3AuQUFfVHlwZSk7XG4gIH1cbn1cblxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgY29uc3Qgc3R1ZHkgPSBuZXcgU3R1ZHlCbG9vbSgpO1xufTtcbiJdLCJuYW1lcyI6WyJBbWJpZW50TGlnaHQiLCJBeGVzSGVscGVyIiwiQ29sb3IiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIlNjZW5lIiwiV2ViR0xSZW5kZXJlciIsIk9yYml0Q29udHJvbHMiLCJDb21tb24iLCJpbml0U2NlbmUiLCJzY2VuZSIsImluaXRMaWdodCIsImFtYmllbnRMaWdodCIsImFkZCIsImluaXRDYW1lcmEiLCJXIiwiSCIsIm5lYXIiLCJmYXIiLCJjYW1lcmEiLCJwb3NpdGlvbiIsInNldCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaW5pdENvbnRyb2wiLCJyZW5kZXIiLCJkb21FbGVtZW50IiwiY29udHJvbCIsInVwZGF0ZSIsImluaXRSZW5kZXJlciIsIm9wdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsImNvbG9yIiwiaWQiLCJhbnRpYWxpYXMiLCJyZW5kZXJlciIsImNhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsInNldFBpeGVsUmF0aW8iLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwiaW5pdEhlbHBlciIsImF4ZXNIZWxwZXIiLCJFZmZlY3RDb21wb3NlciIsIlBvc3RQcm9jZXNzRWZmZWN0Q29tcG9zZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImVuYWJsZWQiLCJWZWN0b3IyIiwiUmVuZGVyUGFzcyIsIlJBRlRpY2tlckV2ZW50Q29udGV4dCIsIlBvc3RQcm9jZXNzUmVuZGVyZXIiLCJjb21wb3NlcnMiLCJfY29tcG9zZXJzIiwiYXJnIiwiZGVsdGEiLCJmb3JFYWNoIiwiY29tcG9zZXIiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJhZGRDb21wb3NlciIsInBhc3NlcyIsInJlbmRlclBhc3MiLCJnZXRDb21wb3NlciIsInB1c2giLCJyZW5kZXJQYXNzT3B0aW9uIiwiUmVuZGVyUGFzc09wdGlvbiIsImluaXQiLCJhZGRQYXNzIiwicCIsInciLCJoIiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImdldFNpemUiLCJTaGFkZXJQYXNzIiwiUG9zdFByb2Nlc3NTaGFkZXJQYXNzIiwidERpZmZ1c2UiLCJ1bmlmb3JtcyIsInZhbHVlIiwiVW5pZm9ybXNVdGlscyIsIlBvc3RQcm9jZXNzU2hhZGVyIiwiRnJhZ21lbnRTaGFkZXIiLCJQZXJpcGhlcmFsTGlnaHRTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImluaXRVbmlmb3JtIiwibWVyZ2UiLCJyYXRlIiwicmFkaXVzSW5uZXIiLCJyYWRpdXNPdXRlciIsIk1hdGgiLCJzcXJ0IiwiUGVyaXBoZXJhbExpZ2h0U2hhZGVyUGFzcyIsIkNocm9tYXRpY0FiZXJyYXRpb25TaGFkZXIiLCJDaHJvbWF0aWNBYmVycmF0aW9uU2hhZGVyUGFzcyIsIk1peFNoYWRlciIsIm1peFRleHR1cmUiLCJNaXhTaGFkZXJQYXNzIiwiTWF0ZXJpYWxTdG9yYWdlIiwidXBkYXRlTWF0ZXJpYWwiLCJvcmlnaW5hbCIsImNvcHlNYXRlcmlhbEFycmF5IiwiZGFya2VuTWF0ZXJpYWxBcnJheSIsImRhcmsiLCJpc0Nsb25lIiwiY2xvbmVUb0RhcmsiLCJjb3B5VG9EYXJrIiwiZGFya2VuSGVhZCIsImdldEhlYWRNYXRlcmlhbCIsIm9yaWdpbmFsSGVhZCIsInR5cGUiLCJtYXQiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0FycmF5T3JpZ2luYWwiLCJkcmsiLCJpbmRleCIsImNvcHkiLCJtYXAiLCJ2YWwiLCJjbG9uZSIsIm1hdGVyaWFsIiwiZGFya2VuTWF0ZXJpYWwiLCJzZXRIZXgiLCJMYXllcnMiLCJCbG9vbUVmZmVjdENvbXBvc2VyIiwiTWF0ZXJpYWxTd2l0Y2hlciIsImRhcmtlbk5vbkJsb29tZWQiLCJ0cmF2ZXJzZVZpc2libGUiLCJzd2l0Y2hUb0RhcmtlbiIsInJlc3RvcmVNYXRlcmlhbCIsInN3aXRjaFRvT3JpZ2luYWxNYXRlcmlhbCIsIm9iaiIsImlzRGFya2VuIiwidXNlckRhdGEiLCJtYXRlcmlhbFN0b3JhZ2UiLCJzdG9yYWdlIiwibWVzaCIsImxheWVycyIsIkJMT09NIiwiaXNNZXNoIiwiaXNMaW5lIiwidGVzdCIsIlVucmVhbEJsb29tUGFzcyIsInN3aXRjaGVyIiwic2l6ZSIsImJsb29tUGFzcyIsInJlbmRlclRvU2NyZWVuIiwicmVzdWx0IiwicmVuZGVyVGFyZ2V0MiIsInRleHR1cmUiLCJFTlRJUkUiLCJGWEFBU2hhZGVyTW9kdWxlIiwiRlhBQVNoYWRlclBhc3MiLCJ3aWR0aCIsImhlaWdodCIsInJlc29sdXRpb24iLCJ4IiwieSIsIkRpc3BsYWNlbWVudE1hcFNoYWRlciIsInN0cmVuZ3RoWCIsInN0cmVuZ3RoWSIsImhhc01hcCIsIlRleHR1cmVMb2FkZXIiLCJEaXNwbGFjZW1lbnRNYXBTaGFkZXJQYXNzIiwibG9hZE1hcCIsInVybCIsImxvYWQiLCJtYXBTaXplVyIsImltYWdlIiwibWFwU2l6ZUgiLCJ1cGRhdGVBc3BlY3QiLCJyZW5kZXJlclNpemVXIiwicmVuZGVyZXJTaXplSCIsInJlbmRlcmVyQXNwZWN0IiwibWFwQXNwZWN0IiwiQ29sb3JGaWx0ZXJTaGFkZXIiLCJtdWx0aVMiLCJtdWx0aUIiLCJhZGRTIiwiYWRkQiIsIkNvbG9yRmlsdGVyU2hhZGVyUGFzcyIsIk1vbm90b25lU2hhZGVyIiwic3RyZW5ndGgiLCJNb25vdG9uZVNoYWRlclBhc3MiLCJDb21tb25HVUkiLCJpbml0R1VJUmVzb2x1dGlvbiIsImd1aSIsInBvc3RSZW5kZXJlciIsInByb3AiLCJvbkNoYW5nZSIsImZvbGRlciIsImFkZEZvbGRlciIsInN0ZXAiLCJvcGVuIiwiaW5pdENvbG9yR1VJIiwidGFyZ2V0IiwicHJvcE5hbWUiLCJ0YXJnZXRDb2xvciIsImdldEhleCIsImFkZENvbG9yIiwiRm9nIiwiTWVzaCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJQb2ludExpZ2h0IiwiUG9pbnRMaWdodEhlbHBlciIsIlNwaGVyZUdlb21ldHJ5IiwiR1VJIiwiU01BQVBhc3MiLCJSQUZUaWNrZXIiLCJTdHVkeUJsb29tIiwiZm9nIiwiaW5pdE9iamVjdCIsInNtYWFQYXNzIiwiZnhhYVBhc3MiLCJvbiIsImluaXRHVUkiLCJzcG90IiwiaGVscGVyIiwiZ2VvIiwidW5kZWZpbmVkIiwid2lyZWZyYW1lIiwiY2VudGVyIiwiZW5hYmxlIiwiaW5pdFBhc3NHVUkiLCJBbnRpQWxpYXNpbmdUeXBlIiwiTm9uZSIsIlNNQUEiLCJGWEFBIiwiQUFfVHlwZSIsIm9uQ2hhbmdlZCIsIm9ubG9hZCIsInN0dWR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///849\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],I=!0,g=0;g<U.length;g++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(I=!1,B<s&&(s=B));if(I){deferred.splice(C--,1);var c=F();void 0!==c&&(Q=c)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=888,(()=>{var Q={888:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[I,g,c]=F,C=0;if(I.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(c)var n=c(__webpack_require__)}for(U&&U(F);C<I.length;C++)s=I[C],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(n)},F=self.webpackChunkthreejs_postprocess=self.webpackChunkthreejs_postprocess||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(849)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();